{"version":3,"sources":["components/grid/boardSlice.js","components/nav/Nav.js","components/grid/Gridrow.js","app/store.js","algorithms/dijkstras.js","Board.js","components/grid/Grid.js","app/App.js","index.js"],"names":["boardSlice","createSlice","name","initialState","board","reducers","setBoard","state","action","payload","updateGrid","actions","selectBoard","Nav","slider","setSlider","useSelector","useState","speed","setSpeed","useEffect","document","body","style","setProperty","handleClick","a","setAnimations","getElementById","innerHTML","solved","runDijkstra","className","onMouseLeave","onClick","id","clearBoard","for","onChange","e","removeVisited","manufactureGrid","target","value","type","min","max","updateSpeed","paddingRight","color","Gridrow","mouseDown","setMouseDown","node","setNode","currentRow","handleMouseDown","preventDefault","isNode","currentlyMoving","addRemoveWall","handleMouseUp","handleMouseEnter","placeNode","dimensions","getDimensions","Array","innerWidth","keys","map","col","offsetWidth","graph","grid","cName","items","length","onMouseEnter","onMouseDown","onMouseUp","store","configureStore","reducer","boardReducer","lowestCostNode","costs","processed","Object","reduce","lowest","includes","dijkstra","getState","walls","start","end","distance","path","assign","Infinity","neighbors","parents","wall","child","myPromise","Promise","resolve","reject","visitedNodes","cost","children","n","newCost","el","push","v","pathName","i","interval","setInterval","clearInterval","visited","optimalPath","parent","reverse","results","shift","pop","Node","this","Board","width","height","numberOfRows","nodeInBoundary","assignGridOfSize","verticalPixelCount","querySelector","row","Number","split","bottom","innerHeight","offsetHeight","right","left","top","conceptualPixelCount","window","numberOfColumns","Math","floor","vertMiddle","horzFirstThird","horzLastThird","size","assignNodes","j","findNeighbors","nodetype","up","down","speedValue","keyword","classname","splice","indexOf","transform","unshift","disable","cssRoot","forEach","disabled","disableNavBar","disableGridTable","result","st","x","y","xs","ys","box","clearWalls","hasItem","Grid","dispatch","useDispatch","bool","manufactureGraph","getRows","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.318962bf.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst boardSlice = createSlice({\n  name: \"board\",\n  initialState: {\n    board: {},\n  },\n  reducers: {\n    setBoard(state, action) {\n      return {\n        board: action.payload,\n      };\n    },\n    updateGrid(state, action) {\n      //this.state.board.grid = action.payload\n    },\n  },\n});\n\n//Actions\n/////////////////////////////////////////////////////////////\nexport const { setBoard, updateGrid } = boardSlice.actions;\n\n//Reducer\n/////////////////////////////////////////////////////////////\nexport default boardSlice.reducer;\n\n//Selectors\n/////////////////////////////////////////////////////////////\nexport const selectBoard = (state) => state.board;\n","import React, { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectBoard } from \"../grid/boardSlice\";\n\nexport const Nav = ({ slider, setSlider }) => {\n  const { board } = useSelector(selectBoard);\n\n  const [speed, setSpeed] = useState(100);\n\n  useEffect(() => {\n    document.body.style.setProperty(\"--visit-delay\", `${100}ms`);\n    document.body.style.setProperty(\n      \"--animation-speed-visited\",\n      `${100 * 5}ms`\n    );\n  }, []);\n  const handleClick = async () => {\n    board.setAnimations(\"on\");\n    document.getElementById(\"distance\").innerHTML = \"Searching...\";\n    board.solved = false;\n    board.runDijkstra();\n  };\n  const handleClear = () => {\n    board.solved = false;\n    board.clearBoard(true);\n  };\n  const handleChange = (e) => {\n    board.setAnimations(\"off\");\n    board.removeVisited(slider);\n    //If start or end node is out of window then hold slider value\n    setSlider(board.manufactureGrid(e.target.value) || slider);\n  };\n\n  const handleMouseLeave = () => {\n    board.setAnimations(\"on\");\n  };\n\n  const handleChangeSpeed = ({ target }) => {\n    setSpeed(target.value);\n    board.updateSpeed(target.value);\n  };\n  return (\n    <div className=\"nav\" onMouseLeave={handleMouseLeave}>\n      <div className=\"nav-title\">\n        <h1>Path Visualizer</h1>\n      </div>\n      <div className=\"algo-button\">\n        <button onClick={handleClick} id=\"algo-button\">\n          Run Algorithm\n        </button>\n      </div>\n      <div className=\"clear-button\">\n        <button onClick={handleClear} id=\"clear-button\">\n          Clear Board\n        </button>\n      </div>\n      <div className=\"toggle\">\n        <div className=\"slider\">\n          <label for=\"slider\">{slider} rows</label>\n          <input\n            onChange={handleChange}\n            type=\"range\"\n            value={slider}\n            id=\"slider\"\n            name=\"volume\"\n            min=\"5\"\n            max=\"20\"\n          ></input>\n        </div>\n        <div className=\"speed\">\n          <label for=\"speed\">Speed: {speed}ms</label>\n          <input\n            onChange={handleChangeSpeed}\n            type=\"range\"\n            value={speed}\n            id=\"speed\"\n            name=\"speed\"\n            min=\"10\"\n            max=\"300\"\n          ></input>\n        </div>\n      </div>\n      <div className=\"distance\">\n        <p style={{ paddingRight: 10 }}>Path Distance: </p>\n        <p id=\"distance\" style={{ color: \"white\" }}>\n          Infinity\n        </p>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectBoard } from \"./boardSlice\";\n\nexport const Gridrow = ({\n  mouseDown,\n  setMouseDown,\n  node,\n  setNode,\n  currentRow,\n  slider,\n  setSlider,\n}) => {\n  const { board } = useSelector(selectBoard);\n\n  const handleMouseDown = (e) => {\n    e.preventDefault();\n    if (board.isNode(e.target.id))\n      setNode({ currentlyMoving: true, type: e.target.className });\n    board.addRemoveWall(e.target);\n    setMouseDown(true);\n  };\n  const handleMouseUp = () => {\n    setNode({ ...node, currentlyMoving: false });\n    setMouseDown(false);\n  };\n  const handleMouseEnter = ({ target }) => {\n    if (node.currentlyMoving) {\n      board.placeNode(node.type, target.id);\n      setNode({ ...node });\n    } else if (mouseDown) board.addRemoveWall(target);\n  };\n\n  const dimensions = board.getDimensions(slider);\n  return [...Array(dimensions.innerWidth).keys()].map((col) => {\n    let id = `${currentRow}-${col + dimensions.offsetWidth}`;\n    board.graph[id] = board.grid[id];\n    let cName =\n      board.grid[id].items.length > 0\n        ? board.grid[id].items[0]\n        : board.grid[id].state;\n    return (\n      <td\n        key={col}\n        id={id}\n        className={cName}\n        onMouseEnter={handleMouseEnter}\n        onMouseDown={handleMouseDown}\n        onMouseUp={handleMouseUp}\n      ></td>\n    );\n  });\n};\n","import { configureStore }  from '@reduxjs/toolkit';\nimport boardReducer from '../components/grid/boardSlice';\n\n\nexport const store =  configureStore({\n    reducer: {\n        board: boardReducer\n    }\n})","import { store } from \"../app/store\";\n\nconst lowestCostNode = (costs, processed) => {\n  return Object.keys(costs).reduce((lowest, node) => {\n    if (lowest === null || costs[node] < costs[lowest]) {\n      if (!processed.includes(node)) lowest = node;\n    }\n    return lowest;\n  }, null);\n};\n\nexport const dijkstra = async () => {\n  const board = store.getState().board.board;\n\n  const { walls, graph, start, end, speed } = board;\n  if (start === end) {\n    return {\n      distance: 0,\n      path: [],\n    };\n  }\n  const costs = Object.assign({ end: Infinity }, graph[start].neighbors);\n  const parents = { end: null };\n  const processed = [];\n  for (let wall of walls) {\n    if (costs[wall]) {\n      delete costs[wall];\n    }\n  }\n  for (let child in graph[start].neighbors) {\n    parents[child] = start;\n  }\n\n  let node = lowestCostNode(costs, processed);\n\n  const myPromise = new Promise((resolve, reject) => {\n    let visitedNodes = [];\n\n    while (true) {\n      let cost = costs[node];\n      let children;\n      if (graph[node]) {\n        children = graph[node].neighbors;\n      } else {\n        children = {};\n      }\n      for (let n in children) {\n        if (!walls.includes(n) || n === end) {\n          let newCost = cost + children[n];\n          if (!costs[n]) {\n            costs[n] = newCost;\n            parents[n] = node;\n          }\n          if (costs[n] > newCost) {\n            costs[n] = newCost;\n            parents[n] = node;\n          }\n        }\n      }\n      const el = document.getElementById(node);\n      if (\n        el &&\n        el.className !== \"start-node\" &&\n        el.className !== \"end-node\" &&\n        !walls.includes(node)\n      )\n        visitedNodes.push(node);\n\n      if (node === end) {\n        break;\n      }\n      processed.push(node);\n      node = lowestCostNode(costs, processed);\n      if (node === null) {\n        break;\n      }\n    }\n\n    if (board.solved) {\n      for (let v of visitedNodes) {\n        const el = document.getElementById(v);\n        let pathName = !parents[end] ? \"deepred\" : \"visited-immediate\";\n        if (el) el.className = pathName;\n        board.grid[v].state = pathName;\n      }\n      resolve(visitedNodes);\n    } else {\n      let i = 0;\n      let interval = setInterval(() => {\n        const el = document.getElementById(visitedNodes[i]);\n        if (el) {\n          el.className = \"visited\";\n          board.grid[visitedNodes[i]].state = \"visited\";\n        }\n        i++;\n        if (!visitedNodes[i]) {\n          clearInterval(interval);\n          resolve(visitedNodes);\n        }\n      }, speed);\n    }\n  });\n\n  let visited = await myPromise;\n\n  let optimalPath = [end];\n  let parent = parents[end];\n  delete parents[start];\n\n  if (!parent) {\n    return {\n      distance: Infinity,\n      path: visited,\n    };\n  }\n\n  while (parent) {\n    optimalPath.push(parent);\n    parent = parents[parent];\n  }\n\n  optimalPath.reverse();\n\n  const results = {\n    distance: costs[end],\n    path: optimalPath,\n  };\n  results.path.shift();\n  results.path.pop();\n  return results;\n};\n","import { dijkstra } from \"./algorithms/dijkstras\";\n\nclass Node {\n  constructor(id, neighbors, items = []) {\n    this.id = id;\n    this.neighbors = neighbors;\n    this.items = items;\n    this.state = \"unvisited\";\n  }\n  hasItem() {\n    return this.items.length > 0;\n  }\n}\n\nexport class Board {\n  constructor() {\n    this.start = \"0-0\";\n    this.end = \"0-0\";\n    this.width = 0;\n    this.height = 0;\n    this.walls = [];\n    this.grid = {};\n    this.graph = {};\n    this.solved = false;\n    this.speed = 100;\n  }\n  manufactureGrid(numberOfRows) {\n    //TODO more elegant way of rotating start\n    document.getElementById(this.start).style = \"\";\n\n    if (\n      this.nodeInBoundary(this.start, numberOfRows) &&\n      this.nodeInBoundary(this.end, numberOfRows)\n    ) {\n      this.graph = {};\n      this.assignGridOfSize(numberOfRows);\n      return numberOfRows;\n    }\n  }\n  assignGridOfSize(numberOfRows) {\n    const { verticalPixelCount } = this.getDimensions(numberOfRows);\n\n    const cssRoot = document.querySelector(\":root\");\n    cssRoot.style.setProperty(\"--size\", `${verticalPixelCount}px`);\n  }\n  nodeInBoundary(node, numberOfRows) {\n    const dimensions = this.getDimensions(numberOfRows);\n    let row = Number(node.split(\"-\")[0]);\n    let col = Number(node.split(\"-\")[1]);\n    let bottom = dimensions.innerHeight - 1 + dimensions.offsetHeight;\n    let right = dimensions.innerWidth - 1 + dimensions.offsetWidth;\n    let left = dimensions.offsetWidth;\n    let top = dimensions.offsetHeight;\n\n    return row <= bottom && row >= top && col <= right && col >= left;\n  }\n  getDimensions(numberOfRows) {\n    const navHeight = 50;\n    const boarderPixelCount = 3;\n    const conceptualPixelCount =\n      (window.innerHeight - navHeight) / numberOfRows;\n    const verticalPixelCount = conceptualPixelCount - boarderPixelCount;\n    const numberOfColumns = window.innerWidth / conceptualPixelCount;\n    const innerHeight = Number(numberOfRows);\n\n    let innerWidth = Math.floor(numberOfColumns) - 1;\n    if (innerWidth > 40) innerWidth = 40;\n    if (innerWidth < 8) innerWidth = 8;\n    const offsetHeight = Math.floor((this.height - innerHeight) / 2);\n    const offsetWidth = Math.floor((this.width - innerWidth) / 2);\n\n    return {\n      verticalPixelCount,\n      innerHeight,\n      offsetHeight,\n      innerWidth,\n      offsetWidth,\n    };\n  }\n  assignNodes(width, height) {\n    const vertMiddle = Math.floor(height / 2) - 1;\n    const horzFirstThird = Math.floor(width / 2) - 3;\n    const horzLastThird = width - Math.floor(width / 2) + 1;\n\n    this.start = `${vertMiddle}-${horzFirstThird}`;\n    this.end = `${vertMiddle}-${horzLastThird}`;\n  }\n  manufactureGraph(size = 20) {\n    const dimensions = this.getDimensions(size);\n    this.height = dimensions.innerHeight;\n    this.width = dimensions.innerWidth;\n\n    this.assignNodes(this.width, this.height);\n\n    for (let i = 0; i < this.height; i++) {\n      for (let j = 0; j < this.width; j++) {\n        const id = `${i}-${j}`;\n        const neighbors = this.findNeighbors(i, j);\n        this.grid[id] = new Node(id, neighbors, this.nodetype(id));\n      }\n    }\n  }\n  findNeighbors(i, j) {\n    let right = j + 1 > this.width - 1 ? null : `${i}-${j + 1}`;\n    let left = j - 1 < 0 ? null : `${i}-${j - 1}`;\n    let up = i + 1 > this.height - 1 ? null : `${i + 1}-${j}`;\n    let down = i - 1 < 0 ? null : `${i - 1}-${j}`;\n    return { [right]: 1, [left]: 1, [up]: 1, [down]: 1 };\n  }\n  isNode(id) {\n    if (id === this.start || id === this.end) {\n      return true;\n    }\n  }\n  nodetype(id) {\n    if (id === this.start) {\n      return [\"start-node\"];\n    } else if (id === this.end) {\n      return [\"end-node\"];\n    } else {\n      return [];\n    }\n  }\n  updateSpeed(speedValue) {\n    this.speed = speedValue;\n    document.body.style.setProperty(\"--visit-delay\", `${this.speed}ms`);\n    document.body.style.setProperty(\n      \"--animation-speed-visited\",\n      `${this.speed * 5}ms`\n    );\n  }\n  setAnimations(keyword) {\n    if (keyword === \"on\") {\n      document.body.style.setProperty(\"--toggle\", \"1\");\n      document.body.style.setProperty(\"--playState\", \"idle\");\n    } else if (keyword === \"off\") {\n      document.body.style.setProperty(\"--toggle\", \"0\");\n      document.body.style.setProperty(\"--playState\", \"finished\");\n    }\n  }\n  addRemoveWall(target) {\n    let classname = target.className;\n    if (\n      classname === \"unvisited\" ||\n      classname === \"visited\" ||\n      classname === \"path\" ||\n      classname === \"visited-immediate\" ||\n      classname === \"path-immediate\" ||\n      classname === \"deepred\"\n    ) {\n      this.walls.push(target.id);\n      target.className = \"wall\";\n      this.grid[target.id].state = \"wall\";\n    } else if (target.className === \"wall\") {\n      this.walls.splice(this.walls.indexOf(target.id), 1);\n      target.className = \"unvisited\";\n      this.grid[target.id].state = \"unvisited\";\n    }\n    if (this.solved) {\n      this.runDijkstra();\n    }\n  }\n  placeNode(name, id) {\n    if (name === \"start-node\") {\n      //TODO more elegant way of rotating start\n      let el = document.getElementById(this.start);\n      if (el.style.transform) {\n        el.style = \"\";\n      }\n      this.grid[this.start].items.shift();\n      this.grid[id].items.unshift(\"start-node\");\n      this.start = id;\n    } else if (name === \"end-node\") {\n      this.grid[this.end].items.shift();\n      this.grid[id].items.unshift(\"end-node\");\n      this.end = id;\n    }\n    if (this.solved) {\n      this.runDijkstra();\n    }\n  }\n  disableGridTable(disable) {\n    const cssRoot = document.querySelector(\":root\");\n    if (disable) {\n      cssRoot.style.setProperty(\"--grid-interact\", `none`);\n    } else {\n      cssRoot.style.setProperty(\"--grid-interact\", `auto`);\n    }\n  }\n\n  disableNavBar(disable) {\n    const navItemIds = [\"algo-button\", \"clear-button\", \"slider\", \"speed\"];\n    navItemIds.forEach(\n      (id) => (document.getElementById(id).disabled = disable)\n    );\n  }\n  async runDijkstra() {\n    this.disableNavBar(true);\n    this.disableGridTable(true);\n    this.clearBoard(false);\n    let result = await dijkstra();\n    document.getElementById(\"distance\").innerHTML = result.distance;\n    this.disableNavBar(false);\n    this.disableGridTable(false);\n    if (result.distance === Infinity) {\n      this.grid[this.start].state = \"deepred\";\n      result.path.forEach((id) => {\n        let el = document.getElementById(id);\n        if (!this.isNode(id)) {\n          el.className = \"deepred\";\n        }\n        this.grid[id].state = \"deepred\";\n      });\n\n      this.solved = false;\n      return;\n    }\n    let i = 0,\n      length = result.path.length;\n\n    //TODO more elegant way of rotating start\n\n    //start-node\n    let st = document.getElementById(this.start);\n    //2nd node in shortest path as x and y coordinates\n    let x, y;\n    if (!result.path[0]) {\n      [x, y] = this.end.split(\"-\");\n    } else {\n      [x, y] = result.path[0].split(\"-\");\n    }\n    //let [x, y] = result.path[0].split(\"-\");\n    //The Start of the Board as x and y coordinates\n    let [xs, ys] = this.start.split(\"-\");\n    //Left\n    if (Number(ys) - 1 === Number(y)) {\n      st.style.transform = \"rotate(180deg)\";\n    }\n    //Right\n    else if (Number(ys) + 1 === Number(y)) {\n    }\n    //Down\n    else if (Number(xs) - 1 === Number(x)) {\n      st.style.transform = \"rotate(-90deg)\";\n    }\n    //Up\n    else if (Number(xs) + 1 === Number(x)) {\n      st.style.transform = \"rotate(90deg)\";\n    }\n\n    if (this.solved) {\n      for (let i = 0; i < result.path.length; i++) {\n        let el = document.getElementById(result.path[i]);\n        if (el) {\n          this.grid[result.path[i]].state = \"path-immediate\";\n          el.className = \"path-immediate\";\n        }\n      }\n    } else {\n      this.solved = true;\n      const interval = setInterval(() => {\n        let el = document.getElementById(result.path[i]);\n        if (el) {\n          this.grid[result.path[i]].state = \"path\";\n          el.className = \"path\";\n        }\n        i++;\n        if (i === length) {\n          clearInterval(interval);\n        }\n      }, this.speed);\n    }\n  }\n  removeVisited(numberOfRows) {\n    for (let box in this.grid) {\n      let id = this.grid[box].id;\n      if (!this.nodeInBoundary(id, numberOfRows) && !this.walls.includes(id)) {\n        this.grid[box].state = \"unvisited\";\n      }\n    }\n  }\n  clearBoard(clearWalls) {\n    for (let box in this.graph) {\n      const el = document.getElementById(box);\n      if (\n        el.className === \"visited\" ||\n        el.className === \"path\" ||\n        el.className === \"visited-immediate\" ||\n        el.className === \"path-immediate\" ||\n        el.className === \"start-node\" ||\n        el.className === \"end-node\" ||\n        el.className === \"deepred\"\n      ) {\n        if (!this.grid[box].hasItem() && this.grid[box].state !== \"wall\") {\n          el.className = \"unvisited\";\n        }\n        if (this.grid[box].state !== \"wall\") {\n          this.grid[box].state = \"unvisited\";\n        }\n      }\n      if (this.walls.includes(box) && clearWalls) {\n        el.className = \"unvisited\";\n        this.grid[box].state = \"unvisited\";\n        this.walls.splice(this.walls.indexOf(box), 1);\n      }\n    }\n  }\n}\n","import React, { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setBoard, selectBoard } from \"./boardSlice\";\nimport { Gridrow } from \"./Gridrow\";\nimport { Board } from \"../../Board\";\n\nexport const Grid = ({ slider, setSlider }) => {\n  const { board } = useSelector(selectBoard);\n  const dispatch = useDispatch();\n  const [mouseDown, setMouseDown] = useState(false);\n  const [node, setNode] = useState({ target: null, bool: false });\n\n  useEffect(() => {\n    let board = new Board();\n    board.manufactureGraph();\n    board.assignGridOfSize(5);\n    dispatch(setBoard(board));\n  }, [dispatch]);\n  const handleMouseLeave = (e) => {\n    setNode({ ...node, currentlyMoving: false });\n    setMouseDown(false);\n  };\n  if (!Object.keys(board).length) {\n    return (\n      <div className=\"loader\">\n        <h3>Loading Grid</h3>\n      </div>\n    );\n  }\n  const getRows = () => {\n    const dimensions = board.getDimensions(slider);\n    return [...Array(dimensions.innerHeight).keys()].map((row) => (\n      <tr key={row} id={`row-${row}`}>\n        <Gridrow\n          key={row}\n          currentRow={row + dimensions.offsetHeight}\n          mouseDown={mouseDown}\n          setMouseDown={setMouseDown}\n          node={node}\n          setNode={setNode}\n          slider={slider}\n          setSlider={setSlider}\n        />\n      </tr>\n    ));\n  };\n  return (\n    <div className=\"grid-container\" onMouseLeave={handleMouseLeave}>\n      <div className=\"grid\">\n        <table className=\"grid-table\" id=\"grid-table\">\n          <tbody>{getRows()}</tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { Nav } from \"../components/nav/Nav\";\nimport { Grid } from \"../components/grid/Grid\";\nimport \"./index.css\";\n\nexport const App = () => {\n  const [slider, setSlider] = useState(5);\n  return (\n    <main className=\"App\">\n      <Nav slider={slider} setSlider={setSlider} />\n      <Grid slider={slider} setSlider={setSlider} />\n    </main>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport { App } from './app/App';\nimport { store } from './app/store'\n\n  ReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n  )"],"sourceRoot":""}