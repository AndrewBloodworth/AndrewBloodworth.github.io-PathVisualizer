{"version":3,"sources":["algorithms/dijkstras.js","components/nav/Nav.js","components/grid/gridSlice.js","components/grid/Gridrow.js","components/grid/Grid.js","app/App.js","app/store.js","index.js"],"names":["lowestCostNode","costs","processed","Object","keys","reduce","lowest","node","includes","graph","walls","dijkstra","a","assign","end","Infinity","startNode","parents","wall","child","myPromise","Promise","resolve","reject","interval","setInterval","cost","children","n","newCost","el","document","getElementById","className","endNode","clearInterval","push","optimalPath","parent","reverse","results","distance","path","Nav","handleClick","result","shift","pop","i","length","onClick","gridSlice","createSlice","name","initialState","grid","rows","cols","reducers","setGrid","state","action","payload","actions","selectGrid","Gridrow","mouseDown","setMouseDown","setNode","currentRow","useSelector","handleMouseDown","e","preventDefault","target","previous","currentlyMoving","type","addRemoveWalls","handleMouseUp","id","handleMouseLeave","handleMouseEnter","splice","indexOf","Array","map","col","cName","start","index","row","Number","slice","right","left","up","down","buildGraph","onMouseEnter","onMouseDown","onMouseUp","onMouseLeave","Grid","dispatch","useDispatch","useState","bool","useEffect","Math","floor","window","innerHeight","innerWidth","vertMiddle","horzFirstThird","horzLastThird","App","store","configureStore","reducer","gridReducer","ReactDOM","render"],"mappings":"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","file":"static/js/main.88bf118b.chunk.js","sourcesContent":["const lowestCostNode = (costs, processed) => {\n    return Object.keys(costs).reduce((lowest, node) => {\n        if (lowest === null || costs[node] < costs[lowest]) {\n            if (!processed.includes(node)) lowest = node;\n        }\n        return lowest;\n    }, null);\n  };\n\nexport const graph = {}\nexport const walls = [];\n\nexport const buildGraph = (start,cName) => {\n    let index = start.indexOf('-');\n    let row = Number(start.slice(0,index))\n    let col = Number(start.slice(index+1,start.length))\n    let right = col+1 > graph.cols-1 ? null : `${row}-${col+1}`;\n    let left = col-1 < 0 ? null : `${row}-${col-1}`;\n    let up = row+1 > graph.rows-1 ? null : `${row+1}-${col}`;\n    let down = row-1 < 0 ? null : `${row-1}-${col}`;\n    if (cName !== 'wall') {\n        graph[start] = {\n            [right]: 1,\n            [left]: 1,\n            [up]: 1,\n            [down]: 1\n        };\n    }\n}\n\nexport const dijkstra = async () => {\n    const costs = Object.assign({end: Infinity}, graph[graph.startNode]);\n    const parents = {end: null};\n    const processed = [];\n    for (let wall of walls) if (costs[wall]) delete graph[wall]\n    for (let child in graph[graph.startNode]) parents[child] = graph[graph.startNode];\n\n    let node = lowestCostNode(costs, processed);\n\n    const myPromise = new Promise((resolve, reject) => {\n        let interval = setInterval(() => {\n            let cost = costs[node];\n            let children = graph[node];\n            for (let n in children) {\n                if (!walls.includes(n)) {\n                    let newCost = cost + children[n];\n                    if (!costs[n]) {\n                        costs[n] = newCost;\n                        parents[n] = node;\n                    }\n                    if (costs[n] > newCost) {\n                        costs[n] = newCost;\n                        parents[n] = node;\n                    }\n                }\n            }\n            const el = document.getElementById(node);\n            if (el && el.className !== 'start-node' && el.className !== 'end-node' && !walls.includes(node)) el.className = 'visited';\n            if (node === graph.endNode) {\n                clearInterval(interval);\n                resolve()\n            }\n            processed.push(node);\n            node = lowestCostNode(costs, processed);\n            if (!node) clearInterval(interval);\n        }, 10)\n    });\n    \n    await myPromise\n\n    let optimalPath = [graph.endNode];\n    let parent = parents[graph.endNode];\n\n    while (parent) {\n        optimalPath.push(parent);\n        parent = parents[parent];\n    }\n      \n    optimalPath.reverse();\n\n    const results = {\n    distance: costs[graph.endNode],\n    path: optimalPath\n    };\n\n    return results;\n}\n","import React from 'react';\nimport { dijkstra } from '../../algorithms/dijkstras';\n\nexport const Nav = () => {\n    const handleClick = async () => {\n        let result = await dijkstra();\n        result.path.shift()\n        result.path.pop()\n        let i = 0\n        let length = result.path.length;\n        const interval = setInterval(() => {\n            document.getElementById(result.path[i]).className = 'path'\n            i++;\n            if (i === length) {\n                clearInterval(interval);\n            }\n        },1)\n    }\n    return (\n        <div className='nav'>\n            <button onClick={handleClick}></button>\n        </div>\n    )\n}","import { createSlice } from '@reduxjs/toolkit';\n\nconst gridSlice = createSlice({\n    name: 'grid',\n    initialState: {\n        grid: {\n            rows: null,\n            cols: null\n        }\n    },\n    reducers: {\n        setGrid(state,action) {\n            return {\n                grid: action.payload\n            }\n        }\n    }\n})\n\n//Actions\n/////////////////////////////////////////////////////////////\nexport const { setGrid } = gridSlice.actions;\n\n//Reducer\n/////////////////////////////////////////////////////////////\nexport default gridSlice.reducer;\n\n//Selectors\n/////////////////////////////////////////////////////////////\nexport const selectGrid = (state) => state.grid;","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectGrid } from './gridSlice'\nimport { graph, buildGraph, walls } from '../../algorithms/dijkstras';\n\nexport const Gridrow = ({ mouseDown, setMouseDown, node, setNode, currentRow }) => {\n    const { grid } = useSelector(selectGrid);\n\n    const handleMouseDown = (e) => {\n        e.preventDefault()\n        /* If the clicked box is a start or end node\n        Set previous node to current node\n        Set currentlyMoving to true and \n        Set the type of node to be the start or end node */\n        if (e.target.className.includes('node')) setNode({previous: e.target, currentlyMoving: true, type: e.target.className})\n        setMouseDown(true);\n        addRemoveWalls(e.target);\n    }\n    const handleMouseUp = ({ target }) => {\n        //Set the start and end node in the graph\n        if (target.className === 'start-node') graph.startNode = target.id;\n        else if (target.className === 'end-node') graph.endNode = target.id;\n        //Start or end node is no longer moving \n        setNode({...node, currentlyMoving: false});\n        setMouseDown(false);\n    }\n    const handleMouseLeave = ({ target }) => {\n        /* If the mouse leaves a box that is a wall and\n        The start or end node is currently being moved,\n        Set the previously visited box to a wall */\n        if (walls.includes(target.id) && node.currentlyMoving) target.className = 'wall';\n        if (node.type === 'start-node' && target.id === graph.endNode) target.className = 'end-node';\n        if (node.type === 'end-node' && target.id === graph.startNode) target.className = 'start-node';\n    }\n    const handleMouseEnter = ({ target }) => {\n        //If the start or end node is currently being moved\n        if (node.currentlyMoving) {\n            //Set the newly entered box to the start or end node\n            target.className = node.type;\n            //If the previously visited box is not a wall, set it to unvisited\n            if (node.previous.className !== 'wall') node.previous.className = 'unvisited';\n            //Set the previous node to be the current box\n            setNode({...node, previous: target});\n        } else if (mouseDown) addRemoveWalls(target);\n    }\n    const addRemoveWalls = (target) => {\n        switch (target.className) {\n            case 'unvisited':\n                //Add newly entered box to walls\n                walls.push(target.id);\n                //Change current box to a wall\n                target.className = 'wall';\n                break;\n            case 'wall':\n                //Remove current box from walls\n                walls.splice(walls.indexOf(target.id),1);\n                //Change current box to unvisited\n                target.className = 'unvisited';\n                break;\n            default:\n                break;\n        }\n    }\n    const getRows = () => {\n        return [...Array(grid.cols).keys()].map(col => {\n            let cName;\n            (graph.startNode === `${currentRow}-${col}`) ? cName = 'start-node' :\n            (graph.endNode === `${currentRow}-${col}`) ? cName = 'end-node' :\n            (walls.includes(`${currentRow}-${col}`)) ? cName = 'wall' : cName = 'unvisited';\n            buildGraph(`${currentRow}-${col}`,cName);\n            return <td key={col} \n                        id={`${currentRow}-${col}`} \n                        className={cName} \n                        onMouseEnter={handleMouseEnter} \n                        onMouseDown={handleMouseDown} \n                        onMouseUp={handleMouseUp} \n                        onMouseLeave={handleMouseLeave}></td>\n        })\n    }\n    return getRows()\n}","import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setGrid, selectGrid } from './gridSlice'\nimport { Gridrow } from './Gridrow';\nimport { graph} from '../../algorithms/dijkstras';\n\nexport const Grid = () => {\n    const { grid } = useSelector(selectGrid);\n    const dispatch = useDispatch();\n    const [mouseDown, setMouseDown] = useState(false);\n    const [node, setNode] = useState({target: null, bool: false});\n\n    useEffect(() => {\n        let rows = Math.floor((window.innerHeight - 25) / 28);\n        let cols = Math.floor(window.innerWidth / 25)-6;\n        graph.rows = rows;\n        graph.cols = cols;\n        const vertMiddle = Math.floor(rows / 2);\n        const horzFirstThird = Math.floor(cols / 6);\n        const horzLastThird = cols - Math.floor(cols / 6);\n        graph.startNode = `${vertMiddle}-${horzFirstThird}`;\n        graph.endNode = `${vertMiddle}-${horzLastThird}`;\n        dispatch(setGrid({rows,cols}))\n    },[dispatch])\n    const handleMouseLeave = (e) => {\n        setNode({...node, currentlyMoving: false, bool: false});\n        setMouseDown(false);\n    }\n    const getRows = () => {\n        return [...Array(grid.rows).keys()].map(row => <tr key={row} id={`row-${row}`}>\n            <Gridrow key={row} \n                    currentRow={row}  \n                    mouseDown={mouseDown} \n                    setMouseDown={setMouseDown}\n                    node={node} \n                    setNode={setNode} /></tr>)\n    }\n    return (\n        <div className='grid-container' onMouseLeave={handleMouseLeave}>\n        <div className='grid'>\n            <table className='grid-table'>\n                <tbody>\n                    {getRows()}\n                </tbody>\n            </table>\n        </div>\n        </div>\n    )\n}","import React from 'react';\nimport { Nav } from '../components/nav/Nav'\nimport { Grid } from '../components/grid/Grid'\n\nexport const App = () => {\n    return (\n        <main className='App'>\n            <Nav />\n            <Grid />\n        </main>\n    )\n}","import { configureStore }  from '@reduxjs/toolkit';\nimport gridReducer from '../components/grid/gridSlice';\n\n\nexport const store =  configureStore({\n    reducer: {\n        grid: gridReducer\n    }\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport { App } from './app/App';\nimport { store } from './app/store'\n\n  ReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n  )"],"sourceRoot":""}