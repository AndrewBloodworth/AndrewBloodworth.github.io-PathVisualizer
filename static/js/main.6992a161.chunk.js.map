{"version":3,"sources":["components/grid/boardSlice.js","components/nav/Nav.js","components/grid/Gridrow.js","Classes/Node.js","Classes/DOMController.js","algorithms/Algorithm.js","Classes/Board.js","components/grid/Grid.js","app/App.js","app/store.js","index.js"],"names":["boardSlice","createSlice","name","initialState","board","reducers","setBoard","state","action","payload","updateGrid","actions","selectBoard","Nav","numberOfRows","setNumberOfRows","useSelector","useState","speed","setSpeed","checked","setChecked","handleClick","a","dom","setAnimations","updatePathDistance","solved","runAlgorithm","className","id","onMouseLeave","error","onClick","clearBoard","type","value","target","toggleDistances","style","margin","for","width","onChange","e","removeVisited","manufactureGraph","min","max","updateSpeed","paddingRight","textAlign","Gridrow","mouseDown","setMouseDown","node","setNode","currentRow","handleMouseDown","preventDefault","grabNode","isNode","currentlyMoving","addRemoveWall","handleMouseUp","handleMouseEnter","placeNode","getDimensions","innerWidth","offsetWidth","Array","keys","map","col","graph","grid","cName","hasItem","items","onMouseEnter","onMouseDown","onMouseUp","getSpecs","Node","neighbors","this","distance","length","setDistance","shift","item","unshift","newState","DOMController","disabled","verticalPixelCount","document","querySelector","setProperty","disable","console","log","cssRoot","forEach","getElementById","keyword","body","styleName","start","innerHTML","el","transform","x","y","st","split","end","xs","ys","Number","pathName","path","makePath","changeState","i","interval","setInterval","clearInterval","visited","hasPath","resolve","Algorithm","distances","parents","processed","initParameters","initNeighbors","Object","assign","Infinity","filterWalls","getNeighbors","neighbor","includes","walls","Promise","reject","visitedNodes","lowestCostNode","nodeDistance","neighborDistances","neighborDistance","push","printVisited","animateVisited","disableInteraction","getVisited","parent","reverse","pointToPath","reduce","lowest","wall","Board","height","size","innerHeight","assignNodes","j","findNeighbors","nodetype","clearStartStyle","nodeInBoundary","assignGraphOfSize","classname","addWall","splice","indexOf","removeWall","autoSolve","prevId","newId","clearTransform","prevNode","newNode","shiftItems","unShiftItems","algo","init","definePath","results","startNode","isNotWall","noPathFound","printPath","animatePath","clearWalls","makeUnvisited","clear","removeSpec","speedValue","updateAnimationSpeed","vertMiddle","Math","floor","horzFirstThird","horzLastThird","offsetHeight","row","conceptualPixelCount","window","numberOfColumns","right","left","up","down","Grid","dispatch","useDispatch","useEffect","manufactureGrid","App","store","configureStore","reducer","boardReducer","ReactDOM","render"],"mappings":"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","file":"static/js/main.6992a161.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst boardSlice = createSlice({\n  name: \"board\",\n  initialState: {\n    board: {},\n  },\n  reducers: {\n    setBoard(state, action) {\n      return {\n        board: action.payload,\n      };\n    },\n    updateGrid(state, action) {\n      //this.state.board.grid = action.payload\n    },\n  },\n});\n\n//Actions\n/////////////////////////////////////////////////////////////\nexport const { setBoard, updateGrid } = boardSlice.actions;\n\n//Reducer\n/////////////////////////////////////////////////////////////\nexport default boardSlice.reducer;\n\n//Selectors\n/////////////////////////////////////////////////////////////\nexport const selectBoard = (state) => state.board;\n","import React, { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectBoard } from \"../grid/boardSlice\";\n\nexport const Nav = ({ numberOfRows, setNumberOfRows }) => {\n  const { board } = useSelector(selectBoard);\n\n  const [speed, setSpeed] = useState(100);\n  const [checked, setChecked] = useState(true);\n\n  const handleClick = async () => {\n    board.dom.setAnimations(\"on\");\n    board.dom.updatePathDistance(\"Searching...\");\n    board.solved = false;\n    board.runAlgorithm();\n  };\n  const handleClear = () => {\n    board.solved = false;\n    board.clearBoard(true);\n  };\n  const handleChange = (e) => {\n    board.dom.setAnimations(\"off\");\n    board.removeVisited(numberOfRows);\n    setNumberOfRows(board.manufactureGraph(e.target.value) || numberOfRows);\n  };\n\n  const handleMouseLeave = () => {\n    try {\n      board.dom.setAnimations(\"on\");\n    } catch (error) {}\n  };\n  const handleViewDistance = ({ target }) => {\n    board.dom.toggleDistances(checked);\n    setChecked(checked ? false : true);\n  };\n\n  const handleChangeSpeed = ({ target }) => {\n    setSpeed(target.value);\n    board.updateSpeed(target.value);\n  };\n  return (\n    <div className=\"nav\" id=\"nav\" onMouseLeave={handleMouseLeave}>\n      <div className=\"nav-title\">\n        <h1>Path Visualizer</h1>\n      </div>\n      <div className=\"controls\">\n        <div className=\"algo-button\">\n          <button onClick={handleClick} id=\"algo-button\">\n            <strong>Run</strong>\n          </button>\n          <h3></h3>\n        </div>\n        <div className=\"clear-button\">\n          <button onClick={handleClear} id=\"clear-button\">\n            <strong>Clear</strong>\n          </button>\n        </div>\n        <div className=\"view-distance\">\n          <input\n            type=\"checkbox\"\n            value={checked}\n            onClick={handleViewDistance}\n            id=\"view-distance\"\n          />\n          <label>Show Distances</label>\n        </div>\n      </div>\n      <div className=\"settings-container\">\n        <div className=\"settings\">\n          <h2 id=\"settings-title\" style={{ margin: 0 }}>\n            Settings:\n          </h2>\n          <div className=\"slider\">\n            <label for=\"slider\" style={{ width: 200 }}>\n              Rows: {numberOfRows}\n            </label>\n            <input\n              onChange={handleChange}\n              type=\"range\"\n              value={numberOfRows}\n              id=\"slider\"\n              min=\"5\"\n              max=\"20\"\n            ></input>\n          </div>\n          <div className=\"speed\">\n            <label for=\"speed\" style={{ width: 200 }}>\n              Speed: {speed}ms\n            </label>\n            <input\n              onChange={handleChangeSpeed}\n              type=\"range\"\n              value={speed}\n              id=\"speed\"\n              name=\"speed\"\n              min=\"10\"\n              max=\"300\"\n            ></input>\n          </div>\n        </div>\n        <div className=\"distance\">\n          <p style={{ paddingRight: 10 }}>Path Distance: </p>\n          <p id=\"distance\" style={{ width: 80, textAlign: \"center\" }}>\n            Infinity\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectBoard } from \"./boardSlice\";\n\nexport const Gridrow = ({\n  mouseDown,\n  setMouseDown,\n  node,\n  setNode,\n  currentRow,\n  numberOfRows,\n}) => {\n  const { board } = useSelector(selectBoard);\n\n  const handleMouseDown = (e) => {\n    e.preventDefault();\n    board.dom.grabNode(\"grabbing\");\n    if (board.isNode(e.target.id))\n      setNode({ currentlyMoving: true, type: e.target });\n    board.addRemoveWall(e.target);\n    setMouseDown(true);\n  };\n  const handleMouseUp = () => {\n    board.dom.grabNode(\"grab\");\n    setNode({ ...node, currentlyMoving: false });\n    setMouseDown(false);\n  };\n  const handleMouseEnter = ({ target }) => {\n    if (node.currentlyMoving) {\n      board.placeNode(node.type.className, node.type.id, target.id);\n      setNode({ ...node, type: target });\n    } else if (mouseDown) board.addRemoveWall(target);\n  };\n\n  const { innerWidth, offsetWidth } = board.getDimensions(numberOfRows);\n  return [...Array(innerWidth).keys()].map((col) => {\n    let id = `${currentRow}-${col + offsetWidth}`;\n    board.graph[id] = board.grid[id];\n    let cName = board.grid[id].hasItem()\n      ? board.grid[id].items[0]\n      : board.grid[id].state;\n    return (\n      <td\n        key={col}\n        id={id}\n        className={cName}\n        onMouseEnter={handleMouseEnter}\n        onMouseDown={handleMouseDown}\n        onMouseUp={handleMouseUp}\n      >\n        <div className=\"specs\" id={`specs-${id}`}>\n          {board.grid[id].getSpecs()}\n        </div>\n      </td>\n    );\n  });\n};\n","export class Node {\n  constructor(id, neighbors, items = []) {\n    this.id = id;\n    this.neighbors = neighbors;\n    this.items = items;\n    this.state = \"unvisited\";\n    this.distance = \"\";\n  }\n  getSpecs() {\n    return this.distance;\n  }\n  hasItem() {\n    return this.items.length > 0;\n  }\n  isNotWall() {\n    return this.state !== \"wall\";\n  }\n  getDistance() {\n    return this.distance;\n  }\n  addWall() {\n    this.state = \"wall\";\n    this.setDistance(\"\");\n  }\n  setDistance(distance) {\n    this.distance = distance;\n  }\n  removeWall() {\n    this.state = \"unvisited\";\n  }\n  shiftItems() {\n    this.items.shift();\n  }\n  unShiftItems(item) {\n    this.items.unshift(item);\n  }\n  clear() {\n    this.state = \"unvisited\";\n    this.setDistance(\"\");\n  }\n  changeState(newState) {\n    this.state = newState;\n  }\n}\n","export class DOMController {\n  constructor(board) {\n    this.board = board;\n    this.disabled = false;\n  }\n  assignGraphOfSize(numberOfRows) {\n    const { verticalPixelCount } = this.board.getDimensions(numberOfRows);\n    const cssRoot = document.querySelector(\":root\");\n    cssRoot.style.setProperty(\"--size\", `${verticalPixelCount}px`);\n  }\n  disableInteraction(disable) {\n    this.disabled = disable;\n    console.log(this.disabled);\n    //Disable Grid Table\n    const cssRoot = document.querySelector(\":root\");\n    if (disable) {\n      cssRoot.style.setProperty(\"--grid-cursor\", `default`);\n      cssRoot.style.setProperty(\"--grid-interact\", `none`);\n    } else {\n      cssRoot.style.setProperty(\"--grid-cursor\", `pointer`);\n      cssRoot.style.setProperty(\"--grid-interact\", `auto`);\n    }\n    //Disable NavBar\n    const navItemIds = [\"algo-button\", \"clear-button\", \"slider\", \"speed\"];\n    navItemIds.forEach(\n      (id) => (document.getElementById(id).disabled = disable)\n    );\n  }\n  setAnimations(keyword) {\n    if (keyword === \"on\") {\n      document.body.style.setProperty(\"--toggle\", \"1\");\n      document.body.style.setProperty(\"--playState\", \"idle\");\n    } else if (keyword === \"off\") {\n      document.body.style.setProperty(\"--toggle\", \"0\");\n      document.body.style.setProperty(\"--playState\", \"finished\");\n    }\n  }\n  grabNode(styleName) {\n    const cssRoot = document.querySelector(\":root\");\n    cssRoot.style.setProperty(\"--node-cursor\", styleName);\n  }\n  toggleDistances(checked) {\n    const cssRoot = document.querySelector(\":root\");\n    if (checked) {\n      cssRoot.style.setProperty(\"--visibility\", `visible`);\n    } else {\n      cssRoot.style.setProperty(\"--visibility\", `hidden`);\n    }\n  }\n  updateAnimationSpeed() {\n    document.body.style.setProperty(\"--visit-delay\", `${this.board.speed}ms`);\n    document.body.style.setProperty(\n      \"--animation-speed-visited\",\n      `${this.board.speed * 5}ms`\n    );\n  }\n  clearStartStyle() {\n    document.getElementById(this.board.start).style = \"\";\n  }\n  addWall(target) {\n    target.className = \"wall\";\n    document.getElementById(`specs-${target.id}`).innerHTML = \"\";\n  }\n  removeWall(target) {\n    target.className = \"unvisited\";\n    document.getElementById(`specs-${target.id}`).innerHTML = \"\";\n  }\n  clearTransform(id) {\n    let el = document.getElementById(id);\n    if (el.style.transform) {\n      el.style = \"\";\n    }\n  }\n  updatePathDistance(distance) {\n    document.getElementById(\"distance\").innerHTML = distance;\n  }\n  noPathFound(id) {\n    if (!this.board.isNode(id)) {\n      document.getElementById(id).className = \"deepred\";\n    }\n  }\n  pointToPath(node) {\n    //TODO more elegant way of rotating start\n    let st = document.getElementById(this.board.start);\n    let x, y;\n    if (!node) {\n      [x, y] = this.board.end.split(\"-\");\n    } else {\n      [x, y] = node.split(\"-\");\n    }\n    let [xs, ys] = this.board.start.split(\"-\");\n    //Left\n    if (Number(ys) - 1 === Number(y)) {\n      st.style.transform = \"rotate(180deg)\";\n    }\n    //Right\n    else if (Number(ys) + 1 === Number(y)) {\n    }\n    //Down\n    else if (Number(xs) - 1 === Number(x)) {\n      st.style.transform = \"rotate(-90deg)\";\n    }\n    //Up\n    else if (Number(xs) + 1 === Number(x)) {\n      st.style.transform = \"rotate(90deg)\";\n    }\n  }\n  makePath(id, pathName) {\n    let el = document.getElementById(id);\n    if (el) {\n      el.className = pathName;\n    }\n  }\n  printPath(path) {\n    path.forEach((id) => {\n      const pathName = \"path-immediate\";\n      const node = this.board.grid[id];\n      this.makePath(id, pathName);\n      node.changeState(pathName);\n    });\n  }\n  animatePath(path) {\n    let i = 0;\n    const interval = setInterval(() => {\n      if (path.length) {\n        const id = path[i];\n        const pathName = \"path\";\n        const node = this.board.grid[id];\n        this.makePath(id, pathName);\n        node.changeState(pathName);\n      }\n      i++;\n      if (i >= path.length) clearInterval(interval);\n    }, this.board.speed);\n  }\n  printVisited(visited, hasPath) {\n    const pathName = !hasPath ? \"deepred\" : \"visited-immediate\";\n    visited.forEach((id) => {\n      document.getElementById(`specs-${id}`).innerHTML =\n        this.board.grid[id].getSpecs();\n      document.getElementById(id).className = pathName;\n      this.board.grid[id].changeState(pathName);\n    });\n  }\n  animateVisited(visited, resolve) {\n    let i = 0;\n    const pathName = \"visited\";\n    const interval = setInterval(() => {\n      if (visited.length) {\n        document.getElementById(visited[i]).className = \"visited\";\n        document.getElementById(`specs-${visited[i]}`).innerHTML =\n          this.board.grid[visited[i]].getSpecs();\n        this.board.grid[visited[i]].changeState(\"visited\");\n      }\n      i++;\n      if (!visited[i]) {\n        clearInterval(interval);\n        resolve(visited);\n      }\n    }, this.board.speed);\n  }\n  makeUnvisited(id) {\n    document.getElementById(id).className = \"unvisited\";\n  }\n  removeSpec(id) {\n    document.getElementById(`specs-${id}`).innerHTML = \"\";\n  }\n  clearWalls(id) {\n    if (!this.board.isNode(id)) {\n      document.getElementById(id).className = \"unvisited\";\n    }\n  }\n}\n","export class Algorithm {\n  constructor(board) {\n    this.board = board;\n    this.distances = {};\n    this.parents = {};\n    this.processed = [];\n  }\n  init() {\n    this.board.clearBoard(false);\n    this.initParameters();\n    this.initNeighbors();\n  }\n  initParameters() {\n    this.distances = Object.assign(\n      { end: Infinity },\n      this.board.graph[this.board.start].neighbors\n    );\n    this.parents = { end: null };\n    this.processed = [];\n    this.filterWalls();\n  }\n  initNeighbors() {\n    let neighbors = this.getNeighbors(this.board.start);\n    for (let neighbor in neighbors) {\n      if (\n        this.board.graph[neighbor] &&\n        !Object.keys(neighbors).includes(this.board.end) &&\n        !this.board.walls.includes(neighbor) &&\n        this.board.start !== this.board.end\n      ) {\n        this.board.graph[neighbor].setDistance(1);\n      }\n      this.parents[neighbor] = this.board.start;\n    }\n  }\n  async getVisited() {\n    return new Promise((resolve, reject) => {\n      let visitedNodes = [];\n      while (true) {\n        let node = this.lowestCostNode();\n        const nodeDistance = this.distance(node);\n        const neighborDistances = this.getNeighbors(node);\n        for (let neighbor in neighborDistances) {\n          if (\n            !this.board.walls.includes(neighbor) ||\n            neighbor === this.board.end\n          ) {\n            const neighborDistance = nodeDistance + neighborDistances[neighbor];\n            if (\n              !this.distance(neighbor) ||\n              this.distance(neighbor) > neighborDistance\n            ) {\n              this.distances[neighbor] = neighborDistance;\n              this.parents[neighbor] = node;\n            }\n          }\n        }\n        if (\n          this.board.graph[node] &&\n          !this.board.isNode(node) &&\n          !this.board.walls.includes(node)\n        ) {\n          visitedNodes.push(node);\n          this.board.graph[node].setDistance(this.distance(node));\n        }\n        this.processed.push(node);\n        if (node === this.board.end || this.lowestCostNode() === null) {\n          break;\n        }\n      }\n      if (this.board.solved) {\n        this.board.dom.printVisited(visitedNodes, this.parents[this.board.end]);\n        resolve(visitedNodes);\n      } else {\n        this.board.dom.animateVisited(visitedNodes, resolve);\n      }\n    });\n  }\n  async definePath() {\n    this.board.dom.disableInteraction(true);\n    this.board.dom.updatePathDistance(\"Searching...\");\n    let distance = 0,\n      path = [];\n\n    const visited = await this.getVisited();\n    let parent = this.parents[this.board.end];\n    if (this.board.start === this.board.end) {\n    } else if (!parent) {\n      distance = Infinity;\n      path = visited;\n    } else {\n      while (parent !== this.board.start) {\n        path.push(parent);\n        parent = this.parents[parent];\n      }\n      path.reverse();\n      distance = this.distance(this.board.end);\n      this.board.dom.pointToPath(path[0]);\n    }\n\n    return () => {\n      this.board.dom.disableInteraction(false);\n      this.board.dom.updatePathDistance(distance);\n      return {\n        distance,\n        path,\n      };\n    };\n  }\n\n  lowestCostNode() {\n    return Object.keys(this.distances).reduce((lowest, node) => {\n      if (lowest === null || this.distances[node] < this.distances[lowest]) {\n        if (!this.processed.includes(node)) lowest = node;\n      }\n      return lowest;\n    }, null);\n  }\n  filterWalls() {\n    for (let wall of this.board.walls) {\n      if (this.distances[wall]) {\n        delete this.distances[wall];\n      }\n    }\n  }\n  getNeighbors(node) {\n    return this.board.graph[node] ? this.board.graph[node].neighbors : {};\n  }\n  distance(node) {\n    return this.distances[node];\n  }\n}\n","import { Node } from \"./Node\";\nimport { DOMController } from \"./DOMController\";\nimport { Algorithm } from \"../algorithms/Algorithm\";\n\nexport class Board {\n  constructor() {\n    this.dom = {};\n    this.start = \"0-0\";\n    this.end = \"0-0\";\n    this.width = 0;\n    this.height = 0;\n    this.walls = [];\n    this.grid = {};\n    this.graph = {};\n    this.solved = false;\n    this.speed = 100;\n  }\n  manufactureGrid(size = 20) {\n    const { innerHeight, innerWidth } = this.getDimensions(size);\n    this.height = innerHeight;\n    this.width = innerWidth;\n\n    this.assignNodes(this.width, this.height);\n\n    for (let i = 0; i < this.height; i++) {\n      for (let j = 0; j < this.width; j++) {\n        const id = `${i}-${j}`;\n        const neighbors = this.findNeighbors(i, j);\n        this.grid[id] = new Node(id, neighbors, this.nodetype(id));\n      }\n    }\n    this.dom = new DOMController(this);\n  }\n  manufactureGraph(numberOfRows) {\n    this.dom.clearStartStyle();\n    if (\n      this.nodeInBoundary(this.start, numberOfRows) &&\n      this.nodeInBoundary(this.end, numberOfRows)\n    ) {\n      this.graph = {};\n      this.dom.assignGraphOfSize(numberOfRows);\n      return numberOfRows;\n    }\n  }\n  addRemoveWall(target) {\n    const classname = target.className;\n    const node = this.grid[target.id];\n\n    if (\n      classname === \"unvisited\" ||\n      classname === \"visited\" ||\n      classname === \"path\" ||\n      classname === \"visited-immediate\" ||\n      classname === \"path-immediate\" ||\n      classname === \"deepred\"\n    ) {\n      this.walls.push(target.id);\n      node.addWall();\n      this.dom.addWall(target);\n    } else if (target.className === \"wall\") {\n      this.walls.splice(this.walls.indexOf(target.id), 1);\n      node.removeWall();\n      this.dom.removeWall(target);\n    }\n    this.autoSolve(\"wall\", target.id);\n  }\n  placeNode(name, prevId, newId) {\n    this.dom.clearTransform(prevId);\n    const prevNode = this.grid[prevId];\n    const newNode = this.grid[newId];\n    prevNode.shiftItems();\n    newNode.unShiftItems(name);\n    if (name === \"start-node\") this.start = newId;\n    else if (name === \"end-node\") this.end = newId;\n    this.autoSolve(\"node\");\n  }\n\n  autoSolve(type, id) {\n    if (!this.dom.disabled) {\n      if (type === \"wall\") {\n        if (this.solved && !this.isNode(id)) {\n          this.runAlgorithm();\n        }\n      } else {\n        if (this.solved) {\n          this.runAlgorithm();\n        }\n      }\n    }\n  }\n  async runAlgorithm() {\n    const algo = new Algorithm(this);\n    algo.init();\n\n    const results = await algo.definePath();\n    const { distance, path } = results();\n\n    if (distance === Infinity) {\n      const startNode = this.grid[this.start];\n      if (startNode.isNotWall()) {\n        startNode.changeState(\"deepred\");\n      }\n      path.forEach((id) => {\n        const node = this.grid[id];\n        this.dom.noPathFound(id);\n        node.changeState(\"deepred\");\n      });\n      this.solved = false;\n      return;\n    }\n\n    if (this.solved) {\n      this.dom.printPath(path);\n    } else {\n      this.solved = true;\n      this.dom.animatePath(path);\n    }\n  }\n  clearBoard(clearWalls) {\n    this.dom.updatePathDistance(\"Infinity\");\n    for (let id in this.graph) {\n      const node = this.grid[id];\n      if (\n        node.state === \"visited\" ||\n        node.state === \"path\" ||\n        node.state === \"visited-immediate\" ||\n        node.state === \"path-immediate\" ||\n        node.state === \"deepred\"\n      ) {\n        if (!node.hasItem()) {\n          this.dom.makeUnvisited(id);\n        }\n        node.clear();\n        this.dom.removeSpec(id);\n      }\n      if (this.walls.includes(id) && clearWalls) {\n        this.dom.clearWalls(id);\n        node.removeWall();\n        this.walls.splice(this.walls.indexOf(id), 1);\n      }\n    }\n  }\n  removeVisited(numberOfRows) {\n    for (let id in this.grid) {\n      const node = this.grid[id];\n      if (!this.nodeInBoundary(id, numberOfRows) && !this.walls.includes(id)) {\n        node.clear();\n      }\n    }\n  }\n  updateSpeed(speedValue) {\n    this.speed = speedValue;\n    this.dom.updateAnimationSpeed();\n  }\n  assignNodes(width, height) {\n    const vertMiddle = Math.floor(height / 2) - 1;\n    const horzFirstThird = Math.floor(width / 2) - 3;\n    const horzLastThird = width - Math.floor(width / 2) + 2;\n\n    this.start = `${vertMiddle}-${horzFirstThird}`;\n    this.end = `${vertMiddle}-${horzLastThird}`;\n  }\n  nodeInBoundary(node, numberOfRows) {\n    const { innerHeight, offsetHeight, innerWidth, offsetWidth } =\n      this.getDimensions(numberOfRows);\n    const row = Number(node.split(\"-\")[0]);\n    const col = Number(node.split(\"-\")[1]);\n    const bottom = innerHeight - 1 + offsetHeight;\n    const right = innerWidth - 1 + offsetWidth;\n    const left = offsetWidth;\n    const top = offsetHeight;\n\n    return row <= bottom && row >= top && col <= right && col >= left;\n  }\n  getDimensions(numberOfRows) {\n    const navHeight = 75;\n    const boarderPixelCount = 3;\n    const conceptualPixelCount =\n      (window.innerHeight - navHeight) / numberOfRows;\n    const verticalPixelCount = conceptualPixelCount - boarderPixelCount;\n    const numberOfColumns = window.innerWidth / conceptualPixelCount;\n    const innerHeight = Number(numberOfRows);\n    let innerWidth = Math.floor(numberOfColumns) - 1;\n    if (innerWidth > 40) innerWidth = 40;\n    if (innerWidth < 8) innerWidth = 8;\n    const offsetHeight = Math.floor((this.height - innerHeight) / 2);\n    const offsetWidth = Math.floor((this.width - innerWidth) / 2);\n\n    return {\n      verticalPixelCount,\n      innerHeight,\n      offsetHeight,\n      innerWidth,\n      offsetWidth,\n    };\n  }\n  findNeighbors(i, j) {\n    const right = j + 1 > this.width - 1 ? null : `${i}-${j + 1}`;\n    const left = j - 1 < 0 ? null : `${i}-${j - 1}`;\n    const up = i + 1 > this.height - 1 ? null : `${i + 1}-${j}`;\n    const down = i - 1 < 0 ? null : `${i - 1}-${j}`;\n    return { [right]: 1, [left]: 1, [up]: 1, [down]: 1 };\n  }\n  isNode(id) {\n    if (id === this.start || id === this.end) {\n      return true;\n    }\n  }\n  nodetype(id) {\n    if (id === this.start) {\n      return [\"start-node\"];\n    } else if (id === this.end) {\n      return [\"end-node\"];\n    } else {\n      return [];\n    }\n  }\n}\n","import React, { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setBoard, selectBoard } from \"./boardSlice\";\nimport { Gridrow } from \"./Gridrow\";\nimport { Board } from \"../../Classes/Board\";\n\nexport const Grid = ({ numberOfRows }) => {\n  const dispatch = useDispatch();\n  const { board } = useSelector(selectBoard);\n  const [mouseDown, setMouseDown] = useState(false);\n  const [node, setNode] = useState({});\n\n  useEffect(() => {\n    const board = new Board();\n    board.manufactureGrid();\n    board.dom.assignGraphOfSize(numberOfRows);\n    dispatch(setBoard(board));\n  }, [dispatch]);\n  const handleMouseLeave = (e) => {\n    setNode({ ...node, currentlyMoving: false });\n    setMouseDown(false);\n  };\n  if (!Object.keys(board).length) {\n    return (\n      <div className=\"loader\">\n        <h3>Loading Grid</h3>\n      </div>\n    );\n  }\n  const { innerHeight, offsetHeight } = board.getDimensions(numberOfRows);\n  return (\n    <div className=\"grid-container\">\n      <div className=\"grid\">\n        <table\n          className=\"grid-table\"\n          id=\"grid-table\"\n          onMouseLeave={handleMouseLeave}\n        >\n          <tbody>\n            {[...Array(innerHeight).keys()].map((row) => (\n              <tr key={row} id={`row-${row}`}>\n                <Gridrow\n                  key={row}\n                  currentRow={row + offsetHeight}\n                  mouseDown={mouseDown}\n                  setMouseDown={setMouseDown}\n                  node={node}\n                  setNode={setNode}\n                  numberOfRows={numberOfRows}\n                />\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { Nav } from \"../components/nav/Nav\";\nimport { Grid } from \"../components/grid/Grid\";\nimport \"./index.css\";\n\nexport const App = () => {\n  const [numberOfRows, setNumberOfRows] = useState(5);\n  return (\n    <main className=\"App\">\n      <Nav numberOfRows={numberOfRows} setNumberOfRows={setNumberOfRows} />\n      <Grid numberOfRows={numberOfRows} />\n    </main>\n  );\n};\n","import { configureStore }  from '@reduxjs/toolkit';\nimport boardReducer from '../components/grid/boardSlice';\n\n\nexport const store =  configureStore({\n    reducer: {\n        board: boardReducer\n    }\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport { App } from './app/App';\nimport { store } from './app/store'\n\n  ReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n  )"],"sourceRoot":""}