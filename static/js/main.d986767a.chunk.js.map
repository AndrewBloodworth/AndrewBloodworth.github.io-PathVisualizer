{"version":3,"sources":["components/grid/boardSlice.js","components/nav/Nav.js","components/grid/Gridrow.js","app/store.js","algorithms/dijkstras.js","Board.js","components/grid/Grid.js","app/App.js","index.js"],"names":["boardSlice","createSlice","name","initialState","board","reducers","setBoard","state","action","payload","updateGrid","actions","selectBoard","Nav","slider","setSlider","useSelector","useState","speed","setSpeed","useEffect","document","body","style","setProperty","handleClick","a","solved","runDijkstra","className","onMouseLeave","onClick","clearBoard","for","onChange","e","removeVisited","manufactureGrid","target","value","type","id","min","max","updateSpeed","color","distance","Gridrow","mouseDown","setMouseDown","node","setNode","currentRow","handleMouseDown","preventDefault","isNode","currentlyMoving","addRemoveWall","handleMouseUp","handleMouseEnter","placeNode","dimensions","getDimensions","Array","innerWidth","keys","map","col","offsetWidth","graph","grid","cName","items","length","onMouseEnter","onMouseDown","onMouseUp","store","configureStore","reducer","boardReducer","lowestCostNode","costs","processed","Object","reduce","lowest","includes","dijkstra","getState","walls","start","end","assign","Infinity","neighbors","parents","wall","child","myPromise","Promise","resolve","reject","visitedNodes","cost","children","n","newCost","el","getElementById","push","v","pathName","i","interval","setInterval","clearInterval","visited","optimalPath","parent","path","reverse","results","shift","pop","Node","this","Board","width","height","numberOfRows","nodeInBoundary","assignGridOfSize","verticalPixelCount","querySelector","row","Number","split","bottom","innerHeight","offsetHeight","right","left","top","conceptualPixelCount","window","numberOfColumns","Math","floor","vertMiddle","horzFirstThird","horzLastThird","size","assignNodes","j","findNeighbors","nodetype","up","down","speedValue","classname","splice","indexOf","transform","unshift","result","forEach","st","x","y","xs","ys","box","clearWalls","hasItem","Grid","dispatch","useDispatch","bool","manufactureGraph","getRows","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.d986767a.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst boardSlice = createSlice({\n  name: \"board\",\n  initialState: {\n    board: {},\n  },\n  reducers: {\n    setBoard(state, action) {\n      return {\n        board: action.payload,\n      };\n    },\n    updateGrid(state, action) {\n      //this.state.board.grid = action.payload\n    },\n  },\n});\n\n//Actions\n/////////////////////////////////////////////////////////////\nexport const { setBoard, updateGrid } = boardSlice.actions;\n\n//Reducer\n/////////////////////////////////////////////////////////////\nexport default boardSlice.reducer;\n\n//Selectors\n/////////////////////////////////////////////////////////////\nexport const selectBoard = (state) => state.board;\n","import React, { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectBoard } from \"../grid/boardSlice\";\n\nexport const Nav = ({ slider, setSlider }) => {\n  const { board } = useSelector(selectBoard);\n\n  const [speed, setSpeed] = useState(100);\n\n  useEffect(() => {\n    document.body.style.setProperty(\"--visit-delay\", `${100}ms`);\n    document.body.style.setProperty(\n      \"--animation-speed-visited\",\n      `${100 * 5}ms`\n    );\n  }, []);\n  const handleClick = async () => {\n    board.solved = false;\n    board.runDijkstra();\n  };\n  const handleClear = () => {\n    board.solved = false;\n    board.clearBoard(true);\n  };\n  const handleChange = (e) => {\n    document.body.style.setProperty(\"--toggle\", \"0\");\n    document.body.style.setProperty(\"--playState\", \"finished\");\n    board.removeVisited(slider);\n    //If start or end node is out of window then hold slider value\n    setSlider(board.manufactureGrid(e.target.value) || slider);\n  };\n\n  const handleMouseLeave = () => {\n    document.body.className = \"\";\n    document.body.style.setProperty(\"--toggle\", \"1\");\n    document.body.style.setProperty(\"--playState\", \"idle\");\n  };\n\n  const handleChangeSpeed = ({ target }) => {\n    setSpeed(target.value);\n    board.updateSpeed(target.value);\n  };\n  return (\n    <div className=\"nav\" onMouseLeave={handleMouseLeave}>\n      <div className=\"nav-title\">\n        <h1>Path Visualizer</h1>\n      </div>\n      <div className=\"algo-button\">\n        <button onClick={handleClick}>Run Algorithm</button>\n      </div>\n      <div className=\"clear-button\">\n        <button onClick={handleClear}>Clear Board</button>\n      </div>\n      <div className=\"toggle\">\n        <div className=\"slider\">\n          <label for=\"slider\">{slider} rows</label>\n          <input\n            onChange={handleChange}\n            type=\"range\"\n            value={slider}\n            id=\"slider\"\n            name=\"volume\"\n            min=\"5\"\n            max=\"20\"\n          ></input>\n        </div>\n        <div className=\"speed\">\n          <label for=\"speed\">Speed: {speed}ms</label>\n          <input\n            onChange={handleChangeSpeed}\n            type=\"range\"\n            value={speed}\n            id=\"speed\"\n            name=\"speed\"\n            min=\"10\"\n            max=\"300\"\n          ></input>\n        </div>\n      </div>\n      <p style={{ color: \"white\" }}>Path Distance: {board.distance}</p>\n    </div>\n  );\n};\n","import React, { useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectBoard } from \"./boardSlice\";\n\nexport const Gridrow = ({\n  mouseDown,\n  setMouseDown,\n  node,\n  setNode,\n  currentRow,\n  slider,\n  setSlider,\n}) => {\n  const { board } = useSelector(selectBoard);\n\n  const handleMouseDown = (e) => {\n    e.preventDefault();\n    if (board.isNode(e.target.id))\n      setNode({ currentlyMoving: true, type: e.target.className });\n    board.addRemoveWall(e.target);\n    setMouseDown(true);\n  };\n  const handleMouseUp = () => {\n    setNode({ ...node, currentlyMoving: false });\n    setMouseDown(false);\n  };\n  const handleMouseEnter = ({ target }) => {\n    if (node.currentlyMoving) {\n      board.placeNode(node.type, target.id);\n      setNode({ ...node });\n    } else if (mouseDown) board.addRemoveWall(target);\n  };\n\n  const dimensions = board.getDimensions(slider);\n  return [...Array(dimensions.innerWidth).keys()].map((col) => {\n    let id = `${currentRow}-${col + dimensions.offsetWidth}`;\n    board.graph[id] = board.grid[id];\n    let cName =\n      board.grid[id].items.length > 0\n        ? board.grid[id].items[0]\n        : board.grid[id].state;\n    return (\n      <td\n        key={col}\n        id={id}\n        className={cName}\n        onMouseEnter={handleMouseEnter}\n        onMouseDown={handleMouseDown}\n        onMouseUp={handleMouseUp}\n      ></td>\n    );\n  });\n};\n","import { configureStore }  from '@reduxjs/toolkit';\nimport boardReducer from '../components/grid/boardSlice';\n\n\nexport const store =  configureStore({\n    reducer: {\n        board: boardReducer\n    }\n})","import { store } from \"../app/store\";\n\nconst lowestCostNode = (costs, processed) => {\n  return Object.keys(costs).reduce((lowest, node) => {\n    if (lowest === null || costs[node] < costs[lowest]) {\n      if (!processed.includes(node)) lowest = node;\n    }\n    return lowest;\n  }, null);\n};\n\nexport const dijkstra = async () => {\n  const board = store.getState().board.board;\n\n  const { walls, graph, start, end, speed } = board;\n  const costs = Object.assign({ end: Infinity }, graph[start].neighbors);\n  const parents = { end: null };\n  const processed = [];\n  for (let wall of walls) {\n    if (costs[wall]) {\n      delete costs[wall];\n    }\n  }\n  for (let child in graph[start].neighbors) {\n    parents[child] = start;\n  }\n\n  let node = lowestCostNode(costs, processed);\n\n  const myPromise = new Promise((resolve, reject) => {\n    let visitedNodes = [];\n\n    while (true) {\n      let cost = costs[node];\n      let children;\n      if (graph[node]) {\n        children = graph[node].neighbors;\n      } else {\n        children = {};\n      }\n      for (let n in children) {\n        if (!walls.includes(n) || walls.includes(end)) {\n          let newCost = cost + children[n];\n          if (!costs[n]) {\n            costs[n] = newCost;\n            parents[n] = node;\n          }\n          if (costs[n] > newCost) {\n            costs[n] = newCost;\n            parents[n] = node;\n          }\n        }\n      }\n      const el = document.getElementById(node);\n      if (\n        el &&\n        el.className !== \"start-node\" &&\n        el.className !== \"end-node\" &&\n        !walls.includes(node)\n      )\n        visitedNodes.push(node);\n\n      if (node === end) {\n        break;\n      }\n      processed.push(node);\n      node = lowestCostNode(costs, processed);\n      if (node === null) {\n        break;\n      }\n    }\n\n    if (board.solved) {\n      for (let v of visitedNodes) {\n        const el = document.getElementById(v);\n        let pathName = !parents[end] ? \"deepred\" : \"visited-immediate\";\n        if (el) el.className = pathName;\n        board.grid[v].state = pathName;\n      }\n      resolve(visitedNodes);\n    } else {\n      let i = 0;\n      let interval = setInterval(() => {\n        const el = document.getElementById(visitedNodes[i]);\n        if (el) {\n          el.className = \"visited\";\n          board.grid[visitedNodes[i]].state = \"visited\";\n        }\n        i++;\n        if (!visitedNodes[i]) {\n          clearInterval(interval);\n          resolve(visitedNodes);\n        }\n      }, speed);\n    }\n  });\n\n  let visited = await myPromise;\n\n  let optimalPath = [end];\n  let parent = parents[end];\n  delete parents[start];\n\n  if (!parent) {\n    return {\n      distance: Infinity,\n      path: visited,\n    };\n  }\n\n  while (parent) {\n    optimalPath.push(parent);\n    parent = parents[parent];\n  }\n\n  optimalPath.reverse();\n\n  const results = {\n    distance: costs[end],\n    path: optimalPath,\n  };\n  board.distance = results.distance;\n  results.path.shift();\n  results.path.pop();\n  return results;\n};\n","import { dijkstra } from \"./algorithms/dijkstras\";\n\nclass Node {\n  constructor(id, neighbors, items = []) {\n    this.id = id;\n    this.neighbors = neighbors;\n    this.items = items;\n    this.state = \"unvisited\";\n  }\n  hasItem() {\n    return this.items.length > 0;\n  }\n}\n\nexport class Board {\n  constructor() {\n    this.start = \"0-0\";\n    this.end = \"0-0\";\n    this.width = 0;\n    this.height = 0;\n    this.walls = [];\n    this.grid = {};\n    this.graph = {};\n    this.solved = false;\n    this.speed = 100;\n    this.distance = Infinity;\n  }\n  manufactureGrid(numberOfRows) {\n    //TODO more elegant way of rotating start\n    document.getElementById(this.start).style = \"\";\n\n    if (\n      this.nodeInBoundary(this.start, numberOfRows) &&\n      this.nodeInBoundary(this.end, numberOfRows)\n    ) {\n      this.graph = {};\n      this.assignGridOfSize(numberOfRows);\n      return numberOfRows;\n    }\n  }\n  assignGridOfSize(numberOfRows) {\n    const { verticalPixelCount } = this.getDimensions(numberOfRows);\n\n    const cssRoot = document.querySelector(\":root\");\n    cssRoot.style.setProperty(\"--size\", `${verticalPixelCount}px`);\n  }\n  nodeInBoundary(node, numberOfRows) {\n    const dimensions = this.getDimensions(numberOfRows);\n    let row = Number(node.split(\"-\")[0]);\n    let col = Number(node.split(\"-\")[1]);\n    let bottom = dimensions.innerHeight - 1 + dimensions.offsetHeight;\n    let right = dimensions.innerWidth - 1 + dimensions.offsetWidth;\n    let left = dimensions.offsetWidth;\n    let top = dimensions.offsetHeight;\n\n    return row <= bottom && row >= top && col <= right && col >= left;\n  }\n  getDimensions(numberOfRows) {\n    const navHeight = 50;\n    const boarderPixelCount = 3;\n    const conceptualPixelCount =\n      (window.innerHeight - navHeight) / numberOfRows;\n    const verticalPixelCount = conceptualPixelCount - boarderPixelCount;\n    const numberOfColumns = window.innerWidth / conceptualPixelCount;\n    const innerHeight = Number(numberOfRows);\n\n    let innerWidth = Math.floor(numberOfColumns) - 1;\n    if (innerWidth > 40) innerWidth = 40;\n    if (innerWidth < 8) innerWidth = 8;\n    const offsetHeight = Math.floor((this.height - innerHeight) / 2);\n    const offsetWidth = Math.floor((this.width - innerWidth) / 2);\n\n    return {\n      verticalPixelCount,\n      innerHeight,\n      offsetHeight,\n      innerWidth,\n      offsetWidth,\n    };\n  }\n  assignNodes(width, height) {\n    const vertMiddle = Math.floor(height / 2) - 1;\n    const horzFirstThird = Math.floor(width / 2) - 3;\n    const horzLastThird = width - Math.floor(width / 2) + 1;\n\n    this.start = `${vertMiddle}-${horzFirstThird}`;\n    this.end = `${vertMiddle}-${horzLastThird}`;\n  }\n  manufactureGraph(size = 20) {\n    const dimensions = this.getDimensions(size);\n    this.height = dimensions.innerHeight;\n    this.width = dimensions.innerWidth;\n\n    this.assignNodes(this.width, this.height);\n\n    for (let i = 0; i < this.height; i++) {\n      for (let j = 0; j < this.width; j++) {\n        const id = `${i}-${j}`;\n        const neighbors = this.findNeighbors(i, j);\n        this.grid[id] = new Node(id, neighbors, this.nodetype(id));\n      }\n    }\n  }\n  findNeighbors(i, j) {\n    let right = j + 1 > this.width - 1 ? null : `${i}-${j + 1}`;\n    let left = j - 1 < 0 ? null : `${i}-${j - 1}`;\n    let up = i + 1 > this.height - 1 ? null : `${i + 1}-${j}`;\n    let down = i - 1 < 0 ? null : `${i - 1}-${j}`;\n    return { [right]: 1, [left]: 1, [up]: 1, [down]: 1 };\n  }\n  isNode(id) {\n    if (id === this.start || id === this.end) {\n      return true;\n    }\n  }\n  nodetype(id) {\n    if (id === this.start) {\n      return [\"start-node\"];\n    } else if (id === this.end) {\n      return [\"end-node\"];\n    } else {\n      return [];\n    }\n  }\n  updateSpeed(speedValue) {\n    this.speed = speedValue;\n    document.body.style.setProperty(\"--visit-delay\", `${this.speed}ms`);\n    document.body.style.setProperty(\n      \"--animation-speed-visited\",\n      `${this.speed * 5}ms`\n    );\n  }\n  addRemoveWall(target) {\n    let classname = target.className;\n    if (\n      classname === \"unvisited\" ||\n      classname === \"visited\" ||\n      classname === \"path\" ||\n      classname === \"visited-immediate\" ||\n      classname === \"path-immediate\" ||\n      classname === \"deepred\"\n    ) {\n      this.walls.push(target.id);\n      target.className = \"wall\";\n      this.grid[target.id].state = \"wall\";\n    } else if (target.className === \"wall\") {\n      this.walls.splice(this.walls.indexOf(target.id), 1);\n      target.className = \"unvisited\";\n      this.grid[target.id].state = \"unvisited\";\n    }\n    if (this.solved) {\n      this.runDijkstra();\n    }\n  }\n  placeNode(name, id) {\n    if (name === \"start-node\") {\n      //TODO more elegant way of rotating start\n      let el = document.getElementById(this.start);\n      if (el.style.transform) {\n        el.style = \"\";\n      }\n      this.grid[this.start].items.shift();\n      this.grid[id].items.unshift(\"start-node\");\n      this.start = id;\n    } else if (name === \"end-node\") {\n      this.grid[this.end].items.shift();\n      this.grid[id].items.unshift(\"end-node\");\n      this.end = id;\n    }\n    if (this.solved) {\n      this.runDijkstra();\n    }\n  }\n\n  async runDijkstra() {\n    this.clearBoard(false);\n    let result = await dijkstra();\n    if (result.distance === Infinity) {\n      this.grid[this.start].state = \"deepred\";\n      result.path.forEach((id) => {\n        let el = document.getElementById(id);\n        if (!this.isNode(id)) {\n          el.className = \"deepred\";\n        }\n        this.grid[id].state = \"deepred\";\n      });\n\n      this.solved = false;\n      return;\n    } else {\n    }\n    let i = 0,\n      length = result.path.length;\n\n    //TODO more elegant way of rotating start\n    if (result.path[0]) {\n      //start-node\n      let st = document.getElementById(this.start);\n      //2nd node in shortest path as x and y coordinates\n      let [x, y] = result.path[0].split(\"-\");\n      //The Start of the Board as x and y coordinates\n      let [xs, ys] = this.start.split(\"-\");\n      //Left\n      if (Number(ys) - 1 === Number(y)) {\n        st.style.transform = \"rotate(180deg)\";\n      }\n      //Right\n      else if (Number(ys) + 1 === Number(y)) {\n      }\n      //Down\n      else if (Number(xs) - 1 === Number(x)) {\n        st.style.transform = \"rotate(-90deg)\";\n      }\n      //Up\n      else if (Number(xs) + 1 === Number(x)) {\n        st.style.transform = \"rotate(90deg)\";\n      }\n    }\n\n    if (this.solved) {\n      for (let i = 0; i < result.path.length; i++) {\n        let el = document.getElementById(result.path[i]);\n        if (el) {\n          this.grid[result.path[i]].state = \"path-immediate\";\n          el.className = \"path-immediate\";\n        }\n      }\n    } else {\n      this.solved = true;\n      const interval = setInterval(() => {\n        let el = document.getElementById(result.path[i]);\n        if (el) {\n          this.grid[result.path[i]].state = \"path\";\n          el.className = \"path\";\n        }\n        i++;\n        if (i === length) {\n          clearInterval(interval);\n        }\n      }, this.speed);\n    }\n  }\n  removeVisited(numberOfRows) {\n    for (let box in this.grid) {\n      let id = this.grid[box].id;\n      if (!this.nodeInBoundary(id, numberOfRows) && !this.walls.includes(id)) {\n        this.grid[box].state = \"unvisited\";\n      }\n    }\n  }\n  clearBoard(clearWalls) {\n    for (let box in this.graph) {\n      const el = document.getElementById(box);\n      if (\n        el.className === \"visited\" ||\n        el.className === \"path\" ||\n        el.className === \"visited-immediate\" ||\n        el.className === \"path-immediate\" ||\n        el.className === \"start-node\" ||\n        el.className === \"end-node\" ||\n        el.className === \"deepred\"\n      ) {\n        if (!this.grid[box].hasItem() && this.grid[box].state !== \"wall\") {\n          el.className = \"unvisited\";\n        }\n        if (this.grid[box].state !== \"wall\") {\n          this.grid[box].state = \"unvisited\";\n        }\n      }\n      if (this.walls.includes(box) && clearWalls) {\n        el.className = \"unvisited\";\n        this.grid[box].state = \"unvisited\";\n        this.walls.splice(this.walls.indexOf(box), 1);\n      }\n    }\n  }\n}\n","import React, { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setBoard, selectBoard } from \"./boardSlice\";\nimport { Gridrow } from \"./Gridrow\";\nimport { Board } from \"../../Board\";\n\nexport const Grid = ({ slider, setSlider }) => {\n  const { board } = useSelector(selectBoard);\n  const dispatch = useDispatch();\n  const [mouseDown, setMouseDown] = useState(false);\n  const [node, setNode] = useState({ target: null, bool: false });\n\n  useEffect(() => {\n    let board = new Board();\n    board.manufactureGraph();\n    board.assignGridOfSize(5);\n    dispatch(setBoard(board));\n  }, [dispatch]);\n  const handleMouseLeave = (e) => {\n    setNode({ ...node, currentlyMoving: false });\n    setMouseDown(false);\n  };\n  if (!Object.keys(board).length) {\n    return (\n      <div className=\"loader\">\n        <h3>Loading Grid</h3>\n      </div>\n    );\n  }\n  const getRows = () => {\n    const dimensions = board.getDimensions(slider);\n    return [...Array(dimensions.innerHeight).keys()].map((row) => (\n      <tr key={row} id={`row-${row}`}>\n        <Gridrow\n          key={row}\n          currentRow={row + dimensions.offsetHeight}\n          mouseDown={mouseDown}\n          setMouseDown={setMouseDown}\n          node={node}\n          setNode={setNode}\n          slider={slider}\n          setSlider={setSlider}\n        />\n      </tr>\n    ));\n  };\n  return (\n    <div className=\"grid-container\" onMouseLeave={handleMouseLeave}>\n      <div className=\"grid\">\n        <table className=\"grid-table\">\n          <tbody>{getRows()}</tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { Nav } from \"../components/nav/Nav\";\nimport { Grid } from \"../components/grid/Grid\";\nimport \"./index.css\";\n\nexport const App = () => {\n  const [slider, setSlider] = useState(5);\n  return (\n    <main className=\"App\">\n      <Nav slider={slider} setSlider={setSlider} />\n      <Grid slider={slider} setSlider={setSlider} />\n    </main>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport { App } from './app/App';\nimport { store } from './app/store'\n\n  ReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n  )"],"sourceRoot":""}