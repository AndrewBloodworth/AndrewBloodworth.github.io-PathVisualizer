{"version":3,"sources":["components/grid/boardSlice.js","components/nav/Settings.js","components/nav/Nav.js","components/grid/Gridrow.js","Classes/Node.js","Classes/DOMController.js","algorithms/Algorithm.js","Classes/Board.js","components/grid/Grid.js","app/App.js","app/store.js","index.js"],"names":["boardSlice","createSlice","name","initialState","board","reducers","setBoard","state","action","payload","updateGrid","actions","selectBoard","Settings","numberOfRows","setNumberOfRows","useSelector","useState","speed","setSpeed","checked","setChecked","active","setActive","settingsMenu","className","style","visibility","onMouseLeave","dom","setAnimations","margin","id","for","fontSize","onChange","e","removeVisited","manufactureGraph","target","value","type","min","max","updateSpeed","onClick","toggleDistances","paddingRight","fontWeight","onMouseEnter","console","log","Nav","handleClick","a","updatePathDistance","updateAlgoButton","solved","runAlgorithm","error","clearBoard","Gridrow","mouseDown","setMouseDown","node","setNode","currentRow","handleMouseDown","preventDefault","grabNode","isNode","currentlyMoving","addRemoveWall","handleMouseUp","handleMouseEnter","placeNode","getDimensions","innerWidth","offsetWidth","Array","keys","map","col","graph","grid","cName","hasItem","items","onMouseDown","onMouseUp","getSpecs","Node","neighbors","this","distance","length","setDistance","shift","item","unshift","newState","DOMController","disabled","pixelSize","document","querySelector","setProperty","disable","cssRoot","forEach","getElementById","keyword","body","styleName","start","innerHTML","el","transform","title","x","y","st","split","end","xs","ys","Number","pathName","path","makePath","changeState","i","interval","setInterval","clearInterval","visited","hasPath","resolve","Algorithm","distances","parents","processed","initParameters","initNeighbors","Object","assign","Infinity","filterWalls","getNeighbors","neighbor","includes","walls","Promise","reject","visitedNodes","lowestCostNode","nodeDistance","neighborDistances","neighborDistance","push","printVisited","animateVisited","disableInteraction","getVisited","parent","reverse","pointToPath","reduce","lowest","wall","Board","width","height","size","innerHeight","assignNodes","row","findNeighbors","nodetype","clearStartStyle","nodeInBoundary","assignGraphOfSize","classname","addWall","splice","indexOf","removeWall","autoSolve","prevId","newId","clearTransform","prevNode","newNode","shiftItems","unShiftItems","algo","init","definePath","results","startNode","isNotWall","noPathFound","printPath","animatePath","clearWalls","makeUnvisited","clear","removeSpec","speedValue","updateAnimationSpeed","vertMiddle","Math","floor","horzFirstThird","horzLastThird","offsetHeight","window","numberOfColumns","j","right","left","up","down","Grid","dispatch","useDispatch","useEffect","manufactureGrid","App","store","configureStore","reducer","boardReducer","ReactDOM","render"],"mappings":"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","file":"static/js/main.59d490ff.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst boardSlice = createSlice({\n  name: \"board\",\n  initialState: {\n    board: {},\n  },\n  reducers: {\n    setBoard(state, action) {\n      return {\n        board: action.payload,\n      };\n    },\n    updateGrid(state, action) {\n      //this.state.board.grid = action.payload\n    },\n  },\n});\n\n//Actions\n/////////////////////////////////////////////////////////////\nexport const { setBoard, updateGrid } = boardSlice.actions;\n\n//Reducer\n/////////////////////////////////////////////////////////////\nexport default boardSlice.reducer;\n\n//Selectors\n/////////////////////////////////////////////////////////////\nexport const selectBoard = (state) => state.board;\n","import React, { useState } from \"react\";\nimport { selectBoard } from \"../grid/boardSlice\";\nimport { useSelector } from \"react-redux\";\n\nexport const Settings = ({ numberOfRows, setNumberOfRows }) => {\n  const { board } = useSelector(selectBoard);\n  const [speed, setSpeed] = useState(100);\n  const [checked, setChecked] = useState(true);\n  const [active, setActive] = useState(false);\n\n  const handleChange = (e) => {\n    board.dom.setAnimations(\"off\");\n    board.removeVisited(numberOfRows);\n    setNumberOfRows(board.manufactureGraph(e.target.value) || numberOfRows);\n  };\n  const handleViewDistance = ({ target }) => {\n    board.dom.toggleDistances(checked);\n    setChecked(checked ? false : true);\n  };\n\n  const handleChangeSpeed = ({ target }) => {\n    setSpeed(target.value);\n    board.updateSpeed(target.value);\n  };\n\n  const handleEnterGear = ({ target }) => {\n    setActive(true);\n  };\n  const handleMouseLeaveSettings = () => {\n    board.dom.setAnimations(\"on\");\n    setActive(false);\n  };\n  const handleClick = ({ target }) => {\n    console.log(\"ID\", target.type);\n    if (target.type !== \"range\" && target.type !== \"checkbox\")\n      setActive(active ? false : true);\n  };\n  let settingsMenu = (\n    <div\n      className=\"settings-menu\"\n      style={{ visibility: active ? \"visible\" : \"hidden\" }}\n      onMouseLeave={handleMouseLeaveSettings}\n    >\n      <div className=\"settings\">\n        <div className=\"settings-title\">\n          <h2 style={{ margin: 0 }}>Settings</h2>\n        </div>\n\n        <hr />\n        <div className=\"slider\" id=\"setting\">\n          <label for=\"slider\">\n            <span style={{ fontSize: 20 }}>Rows: </span>\n          </label>\n          <input\n            onChange={handleChange}\n            type=\"range\"\n            value={numberOfRows}\n            id=\"slider\"\n            min=\"5\"\n            max=\"20\"\n          ></input>\n        </div>\n        <hr />\n        <div className=\"speed\" id=\"setting\">\n          <label for=\"speed\">\n            <span style={{ fontSize: 20 }}>Speed: </span>\n          </label>\n          <input\n            onChange={handleChangeSpeed}\n            type=\"range\"\n            value={speed}\n            id=\"speed\"\n            name=\"speed\"\n            min=\"10\"\n            max=\"300\"\n          ></input>\n        </div>\n        <hr />\n        <div className=\"view-distance\" id=\"setting\">\n          <label>\n            <span style={{ fontSize: 20 }}>Show Distances: </span>\n          </label>\n          <div className=\"show-hide-distances\">\n            <input\n              type=\"checkbox\"\n              value={checked}\n              onClick={handleViewDistance}\n              id=\"view-distance\"\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n  return (\n    <div className=\"settings-container\">\n      <div className=\"distance\">\n        <p style={{ paddingRight: 10, margin: 0 }}>Path Distance: </p>\n        <p id=\"distance\" style={{ fontWeight: 800 }}>\n          Infinity\n        </p>\n      </div>\n      <div className=\"options\">\n        <div\n          className=\"settings-detail\"\n          onMouseEnter={handleEnterGear}\n          onClick={handleClick}\n        >\n          <div className=\"detail-container\">\n            <div className=\"detail\">\n              <u>Rows </u>\n              {numberOfRows}\n            </div>\n            <div className=\"detail\">\n              <u>Speed</u>\n              {speed}ms\n            </div>\n            <div className=\"detail\">\n              <u>Distances</u>\n              {checked ? \"Hidden\" : \"Shown\"}\n            </div>\n          </div>\n          {settingsMenu}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectBoard } from \"../grid/boardSlice\";\nimport { Settings } from \"./Settings\";\n\nexport const Nav = ({ numberOfRows, setNumberOfRows }) => {\n  const { board } = useSelector(selectBoard);\n\n  const handleClick = async () => {\n    board.dom.setAnimations(\"on\");\n    board.dom.updatePathDistance(\"Searching...\");\n    board.dom.updateAlgoButton(\"Running\");\n    board.solved = false;\n    board.runAlgorithm();\n  };\n  const handleClear = () => {\n    board.solved = false;\n    board.clearBoard(true);\n  };\n  const handleMouseEnter = () => {\n    try {\n      board.dom.setAnimations(\"on\");\n    } catch (error) {}\n  };\n  return (\n    <div className=\"nav\" id=\"nav\" onMouseEnter={handleMouseEnter}>\n      <div className=\"nav-title\">\n        <h1>Path Visualizer</h1>\n      </div>\n      <div className=\"controls\">\n        <div className=\"algo-button\">\n          <button onClick={handleClick} id=\"algo-button\">\n            <strong>Run</strong>\n          </button>\n        </div>\n        <div className=\"clear-button\">\n          <button onClick={handleClear} id=\"clear-button\">\n            <strong>Clear</strong>\n          </button>\n        </div>\n      </div>\n      <Settings numberOfRows={numberOfRows} setNumberOfRows={setNumberOfRows} />\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectBoard } from \"./boardSlice\";\n\nexport const Gridrow = ({\n  mouseDown,\n  setMouseDown,\n  node,\n  setNode,\n  currentRow,\n  numberOfRows,\n}) => {\n  const { board } = useSelector(selectBoard);\n\n  const handleMouseDown = (e) => {\n    e.preventDefault();\n    board.dom.grabNode(\"grabbing\");\n    if (board.isNode(e.target.id))\n      setNode({ currentlyMoving: true, type: e.target });\n    board.addRemoveWall(e.target);\n    setMouseDown(true);\n  };\n  const handleMouseUp = () => {\n    board.dom.grabNode(\"grab\");\n    setNode({ ...node, currentlyMoving: false });\n    setMouseDown(false);\n  };\n  const handleMouseEnter = ({ target }) => {\n    if (node.currentlyMoving) {\n      board.placeNode(node.type.className, node.type.id, target.id);\n      setNode({ ...node, type: target });\n    } else if (mouseDown) {\n      board.addRemoveWall(target);\n    }\n  };\n\n  const { innerWidth, offsetWidth } = board.getDimensions(numberOfRows);\n  return [...Array(innerWidth).keys()].map((col) => {\n    let id = `${currentRow}-${col + offsetWidth}`;\n    board.graph[id] = board.grid[id];\n    let cName = board.grid[id].hasItem()\n      ? board.grid[id].items[0]\n      : board.grid[id].state;\n    return (\n      <td\n        key={col}\n        id={id}\n        className={cName}\n        onMouseEnter={handleMouseEnter}\n        onMouseDown={handleMouseDown}\n        onMouseUp={handleMouseUp}\n      >\n        <div className=\"specs\" id={`specs-${id}`}>\n          {board.grid[id].getSpecs()}\n        </div>\n      </td>\n    );\n  });\n};\n","export class Node {\n  constructor(id, neighbors, items = []) {\n    this.id = id;\n    this.neighbors = neighbors;\n    this.items = items;\n    this.state = \"unvisited\";\n    this.distance = \"\";\n  }\n  getSpecs() {\n    return this.distance;\n  }\n  hasItem() {\n    return this.items.length > 0;\n  }\n  isNotWall() {\n    return this.state !== \"wall\";\n  }\n  getDistance() {\n    return this.distance;\n  }\n  addWall() {\n    this.state = \"wall\";\n    this.setDistance(\"\");\n  }\n  setDistance(distance) {\n    this.distance = distance;\n  }\n  removeWall() {\n    this.state = \"unvisited\";\n  }\n  shiftItems() {\n    this.items.shift();\n  }\n  unShiftItems(item) {\n    this.items.unshift(item);\n  }\n  clear() {\n    this.state = \"unvisited\";\n    this.setDistance(\"\");\n  }\n  changeState(newState) {\n    this.state = newState;\n  }\n}\n","export class DOMController {\n  constructor(board) {\n    this.board = board;\n    this.disabled = false;\n  }\n  assignGraphOfSize(numberOfRows) {\n    const { pixelSize } = this.board.getDimensions(numberOfRows);\n    const cssRoot = document.querySelector(\":root\");\n    cssRoot.style.setProperty(\"--node-size\", `${pixelSize}px`);\n  }\n  disableInteraction(disable) {\n    this.disabled = disable;\n    //Disable Grid Table\n    const cssRoot = document.querySelector(\":root\");\n    if (disable) {\n      cssRoot.style.setProperty(\"--grid-cursor\", `default`);\n      cssRoot.style.setProperty(\"--grid-interact\", `none`);\n    } else {\n      cssRoot.style.setProperty(\"--grid-cursor\", `pointer`);\n      cssRoot.style.setProperty(\"--grid-interact\", `auto`);\n    }\n    //Disable NavBar\n    const navItemIds = [\"algo-button\", \"clear-button\", \"slider\", \"speed\"];\n    navItemIds.forEach(\n      (id) => (document.getElementById(id).disabled = disable)\n    );\n  }\n  setAnimations(keyword) {\n    if (keyword === \"on\") {\n      document.body.style.setProperty(\"--toggle\", \"1\");\n      document.body.style.setProperty(\"--playState\", \"idle\");\n    } else if (keyword === \"off\") {\n      document.body.style.setProperty(\"--toggle\", \"0\");\n      document.body.style.setProperty(\"--playState\", \"finished\");\n    }\n  }\n  grabNode(styleName) {\n    const cssRoot = document.querySelector(\":root\");\n    cssRoot.style.setProperty(\"--node-cursor\", styleName);\n  }\n  toggleDistances(checked) {\n    const cssRoot = document.querySelector(\":root\");\n    if (checked) {\n      cssRoot.style.setProperty(\"--visibility\", `visible`);\n    } else {\n      cssRoot.style.setProperty(\"--visibility\", `hidden`);\n    }\n  }\n  updateAnimationSpeed() {\n    document.body.style.setProperty(\"--visit-delay\", `${this.board.speed}ms`);\n    document.body.style.setProperty(\n      \"--animation-speed-visited\",\n      `${this.board.speed * 5}ms`\n    );\n  }\n  clearStartStyle() {\n    document.getElementById(this.board.start).style = \"\";\n  }\n  addWall(target) {\n    target.className = \"wall\";\n    document.getElementById(`specs-${target.id}`).innerHTML = \"\";\n  }\n  removeWall(target) {\n    target.className = \"unvisited\";\n    document.getElementById(`specs-${target.id}`).innerHTML = \"\";\n  }\n  clearTransform(id) {\n    let el = document.getElementById(id);\n    if (el.style.transform) {\n      el.style = \"\";\n    }\n  }\n  updatePathDistance(distance) {\n    document.getElementById(\"distance\").innerHTML = distance;\n  }\n  updateAlgoButton(title) {\n    document.getElementById(\n      \"algo-button\"\n    ).innerHTML = `<strong>${title}</strong>`;\n  }\n  noPathFound(id) {\n    if (!this.board.isNode(id)) {\n      document.getElementById(id).className = \"deepred\";\n    }\n  }\n  pointToPath(node) {\n    //TODO more elegant way of rotating start\n    let st = document.getElementById(this.board.start);\n    let x, y;\n    if (!node) {\n      [x, y] = this.board.end.split(\"-\");\n    } else {\n      [x, y] = node.split(\"-\");\n    }\n    let [xs, ys] = this.board.start.split(\"-\");\n    //Left\n    if (Number(ys) - 1 === Number(y)) {\n      st.style.transform = \"rotate(180deg)\";\n    }\n    //Right\n    else if (Number(ys) + 1 === Number(y)) {\n    }\n    //Down\n    else if (Number(xs) - 1 === Number(x)) {\n      st.style.transform = \"rotate(-90deg)\";\n    }\n    //Up\n    else if (Number(xs) + 1 === Number(x)) {\n      st.style.transform = \"rotate(90deg)\";\n    }\n  }\n  makePath(id, pathName) {\n    let el = document.getElementById(id);\n    if (el) {\n      el.className = pathName;\n    }\n  }\n  printPath(path) {\n    path.forEach((id) => {\n      const pathName = \"path-immediate\";\n      const node = this.board.grid[id];\n      this.makePath(id, pathName);\n      node.changeState(pathName);\n    });\n  }\n  animatePath(path) {\n    let i = 0;\n    const interval = setInterval(() => {\n      if (path.length) {\n        const id = path[i];\n        const pathName = \"path\";\n        const node = this.board.grid[id];\n        this.makePath(id, pathName);\n        node.changeState(pathName);\n      }\n      i++;\n      if (i >= path.length) clearInterval(interval);\n    }, this.board.speed);\n  }\n  printVisited(visited, hasPath) {\n    const pathName = !hasPath ? \"deepred\" : \"visited-immediate\";\n    visited.forEach((id) => {\n      document.getElementById(`specs-${id}`).innerHTML =\n        this.board.grid[id].getSpecs();\n      document.getElementById(id).className = pathName;\n      this.board.grid[id].changeState(pathName);\n    });\n  }\n  animateVisited(visited, resolve) {\n    let i = 0;\n    const pathName = \"visited\";\n    const interval = setInterval(() => {\n      if (visited.length) {\n        document.getElementById(visited[i]).className = \"visited\";\n        document.getElementById(`specs-${visited[i]}`).innerHTML =\n          this.board.grid[visited[i]].getSpecs();\n        this.board.grid[visited[i]].changeState(\"visited\");\n      }\n      i++;\n      if (!visited[i]) {\n        clearInterval(interval);\n        resolve(visited);\n      }\n    }, this.board.speed);\n  }\n  makeUnvisited(id) {\n    document.getElementById(id).className = \"unvisited\";\n  }\n  removeSpec(id) {\n    document.getElementById(`specs-${id}`).innerHTML = \"\";\n  }\n  clearWalls(id) {\n    if (!this.board.isNode(id)) {\n      document.getElementById(id).className = \"unvisited\";\n    }\n  }\n}\n","export class Algorithm {\n  constructor(board) {\n    this.board = board;\n    this.distances = {};\n    this.parents = {};\n    this.processed = [];\n  }\n  init() {\n    this.board.clearBoard(false);\n    this.initParameters();\n    this.initNeighbors();\n  }\n  initParameters() {\n    this.distances = Object.assign(\n      { end: Infinity },\n      this.board.graph[this.board.start].neighbors\n    );\n    this.parents = { end: null };\n    this.processed = [];\n    this.filterWalls();\n  }\n  initNeighbors() {\n    let neighbors = this.getNeighbors(this.board.start);\n    for (let neighbor in neighbors) {\n      if (\n        this.board.graph[neighbor] &&\n        !Object.keys(neighbors).includes(this.board.end) &&\n        !this.board.walls.includes(neighbor) &&\n        this.board.start !== this.board.end\n      ) {\n        this.board.graph[neighbor].setDistance(1);\n      }\n      this.parents[neighbor] = this.board.start;\n    }\n  }\n  async getVisited() {\n    return new Promise((resolve, reject) => {\n      let visitedNodes = [];\n      while (true) {\n        let node = this.lowestCostNode();\n        const nodeDistance = this.distance(node);\n        const neighborDistances = this.getNeighbors(node);\n        for (let neighbor in neighborDistances) {\n          if (\n            !this.board.walls.includes(neighbor) ||\n            neighbor === this.board.end\n          ) {\n            const neighborDistance = nodeDistance + neighborDistances[neighbor];\n            if (\n              !this.distance(neighbor) ||\n              this.distance(neighbor) > neighborDistance\n            ) {\n              this.distances[neighbor] = neighborDistance;\n              this.parents[neighbor] = node;\n            }\n          }\n        }\n        if (\n          this.board.graph[node] &&\n          !this.board.isNode(node) &&\n          !this.board.walls.includes(node)\n        ) {\n          visitedNodes.push(node);\n          this.board.graph[node].setDistance(this.distance(node));\n        }\n        this.processed.push(node);\n        if (node === this.board.end || this.lowestCostNode() === null) {\n          break;\n        }\n      }\n      if (this.board.solved) {\n        this.board.dom.printVisited(visitedNodes, this.parents[this.board.end]);\n        resolve(visitedNodes);\n      } else {\n        this.board.dom.animateVisited(visitedNodes, resolve);\n      }\n    });\n  }\n  async definePath() {\n    this.board.dom.disableInteraction(true);\n    this.board.dom.updatePathDistance(\"Searching...\");\n    let distance = 0,\n      path = [];\n\n    const visited = await this.getVisited();\n    let parent = this.parents[this.board.end];\n    if (this.board.start === this.board.end) {\n    } else if (!parent) {\n      distance = Infinity;\n      path = visited;\n    } else {\n      while (parent !== this.board.start) {\n        path.push(parent);\n        parent = this.parents[parent];\n      }\n      path.reverse();\n      distance = this.distance(this.board.end);\n      this.board.dom.pointToPath(path[0]);\n    }\n\n    return () => {\n      this.board.dom.disableInteraction(false);\n      this.board.dom.updatePathDistance(distance);\n      this.board.dom.updateAlgoButton(distance === Infinity ? \"Run\" : \"Auto\");\n      return {\n        distance,\n        path,\n      };\n    };\n  }\n\n  lowestCostNode() {\n    return Object.keys(this.distances).reduce((lowest, node) => {\n      if (lowest === null || this.distances[node] < this.distances[lowest]) {\n        if (!this.processed.includes(node)) lowest = node;\n      }\n      return lowest;\n    }, null);\n  }\n  filterWalls() {\n    for (let wall of this.board.walls) {\n      if (this.distances[wall]) {\n        delete this.distances[wall];\n      }\n    }\n  }\n  getNeighbors(node) {\n    return this.board.graph[node] ? this.board.graph[node].neighbors : {};\n  }\n  distance(node) {\n    return this.distances[node];\n  }\n}\n","import { Node } from \"./Node\";\nimport { DOMController } from \"./DOMController\";\nimport { Algorithm } from \"../algorithms/Algorithm\";\n\nexport class Board {\n  constructor() {\n    this.dom = {};\n    this.start = \"0-0\";\n    this.end = \"0-0\";\n    this.width = 0;\n    this.height = 0;\n    this.walls = [];\n    this.grid = {};\n    this.graph = {};\n    this.solved = false;\n    this.speed = 100;\n  }\n  manufactureGrid(size = 20) {\n    const { innerHeight, innerWidth } = this.getDimensions(size);\n    this.height = innerHeight;\n    this.width = innerWidth;\n\n    this.assignNodes(this.width, this.height);\n\n    for (let row = 0; row < this.height; row++) {\n      for (let col = 0; col < this.width; col++) {\n        const id = `${row}-${col}`;\n        const neighbors = this.findNeighbors(row, col);\n        this.grid[id] = new Node(id, neighbors, this.nodetype(id));\n      }\n    }\n    this.dom = new DOMController(this);\n  }\n  manufactureGraph(numberOfRows) {\n    this.dom.clearStartStyle();\n    if (\n      this.nodeInBoundary(this.start, numberOfRows) &&\n      this.nodeInBoundary(this.end, numberOfRows)\n    ) {\n      this.graph = {};\n      this.dom.assignGraphOfSize(numberOfRows);\n      return numberOfRows;\n    }\n  }\n  addRemoveWall(target) {\n    const classname = target.className;\n    const node = this.grid[target.id];\n\n    if (\n      classname === \"unvisited\" ||\n      classname === \"visited\" ||\n      classname === \"path\" ||\n      classname === \"visited-immediate\" ||\n      classname === \"path-immediate\" ||\n      classname === \"deepred\"\n    ) {\n      this.walls.push(target.id);\n      node.addWall();\n      this.dom.addWall(target);\n    } else if (classname === \"wall\") {\n      this.walls.splice(this.walls.indexOf(target.id), 1);\n      node.removeWall();\n      this.dom.removeWall(target);\n    }\n    this.autoSolve(\"wall\", target.id);\n  }\n  placeNode(name, prevId, newId) {\n    this.dom.clearTransform(prevId);\n    const prevNode = this.grid[prevId];\n    const newNode = this.grid[newId];\n    prevNode.shiftItems();\n    newNode.unShiftItems(name);\n    if (name === \"start-node\") this.start = newId;\n    else if (name === \"end-node\") this.end = newId;\n    this.autoSolve(\"node\");\n  }\n\n  autoSolve(type, id) {\n    if (!this.dom.disabled) {\n      if (type === \"wall\") {\n        if (this.solved && !this.isNode(id)) {\n          this.runAlgorithm();\n        }\n      } else {\n        if (this.solved) {\n          this.runAlgorithm();\n        }\n      }\n    }\n  }\n  async runAlgorithm() {\n    const algo = new Algorithm(this);\n    algo.init();\n\n    const results = await algo.definePath();\n    const { distance, path } = results();\n\n    if (distance === Infinity) {\n      const startNode = this.grid[this.start];\n      if (startNode.isNotWall()) {\n        startNode.changeState(\"deepred\");\n      }\n      path.forEach((id) => {\n        const node = this.grid[id];\n        this.dom.noPathFound(id);\n        node.changeState(\"deepred\");\n      });\n      this.solved = false;\n      return;\n    }\n\n    if (this.solved) {\n      this.dom.printPath(path);\n    } else {\n      this.solved = true;\n      this.dom.animatePath(path);\n    }\n  }\n  clearBoard(clearWalls) {\n    this.dom.updatePathDistance(\"Infinity\");\n    this.dom.updateAlgoButton(\"Run\");\n    for (let id in this.graph) {\n      const node = this.grid[id];\n      if (\n        node.state === \"visited\" ||\n        node.state === \"path\" ||\n        node.state === \"visited-immediate\" ||\n        node.state === \"path-immediate\" ||\n        node.state === \"deepred\"\n      ) {\n        if (!node.hasItem()) {\n          this.dom.makeUnvisited(id);\n        }\n        node.clear();\n        this.dom.removeSpec(id);\n      }\n      if (this.walls.includes(id) && clearWalls) {\n        this.dom.clearWalls(id);\n        node.removeWall();\n        this.walls.splice(this.walls.indexOf(id), 1);\n      }\n    }\n  }\n  removeVisited(numberOfRows) {\n    for (let id in this.grid) {\n      const node = this.grid[id];\n      if (!this.nodeInBoundary(id, numberOfRows) && !this.walls.includes(id)) {\n        node.clear();\n      }\n    }\n  }\n  updateSpeed(speedValue) {\n    this.speed = speedValue;\n    this.dom.updateAnimationSpeed();\n  }\n  assignNodes(width, height) {\n    const vertMiddle = Math.floor(height / 2) - 1;\n    const horzFirstThird = Math.floor(width / 2) - 3;\n    const horzLastThird = Math.floor(width / 2) + 2;\n\n    this.start = `${vertMiddle}-${horzFirstThird}`;\n    this.end = `${vertMiddle}-${horzLastThird}`;\n  }\n  nodeInBoundary(node, numberOfRows) {\n    const { innerHeight, offsetHeight, innerWidth, offsetWidth } =\n      this.getDimensions(numberOfRows);\n    const row = Number(node.split(\"-\")[0]);\n    const col = Number(node.split(\"-\")[1]);\n    const bottom = innerHeight - 1 + offsetHeight;\n    const right = innerWidth - 1 + offsetWidth;\n    const left = offsetWidth;\n    const top = offsetHeight;\n\n    return row <= bottom && row >= top && col <= right && col >= left;\n  }\n  getDimensions(numberOfRows) {\n    const navHeight = 75;\n\n    const pixelSize = (window.innerHeight - navHeight) / numberOfRows;\n    const numberOfColumns = window.innerWidth / pixelSize;\n    const innerHeight = Number(numberOfRows);\n    let innerWidth = Math.floor(numberOfColumns) - 1;\n    if (innerWidth > 40) innerWidth = 40;\n    if (innerWidth < 8) innerWidth = 8;\n    const offsetHeight = Math.floor((this.height - innerHeight) / 2);\n    const offsetWidth = Math.floor((this.width - innerWidth) / 2);\n\n    return {\n      pixelSize,\n      innerHeight,\n      offsetHeight,\n      innerWidth,\n      offsetWidth,\n    };\n  }\n  findNeighbors(i, j) {\n    const right = j + 1 > this.width - 1 ? null : `${i}-${j + 1}`;\n    const left = j - 1 < 0 ? null : `${i}-${j - 1}`;\n    const up = i + 1 > this.height - 1 ? null : `${i + 1}-${j}`;\n    const down = i - 1 < 0 ? null : `${i - 1}-${j}`;\n    return { [right]: 1, [left]: 1, [up]: 1, [down]: 1 };\n  }\n  isNode(id) {\n    if (id === this.start || id === this.end) {\n      return true;\n    }\n  }\n  nodetype(id) {\n    if (id === this.start) {\n      return [\"start-node\"];\n    } else if (id === this.end) {\n      return [\"end-node\"];\n    } else {\n      return [];\n    }\n  }\n}\n","import React, { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setBoard, selectBoard } from \"./boardSlice\";\nimport { Gridrow } from \"./Gridrow\";\nimport { Board } from \"../../Classes/Board\";\n\nexport const Grid = ({ numberOfRows }) => {\n  const dispatch = useDispatch();\n  const { board } = useSelector(selectBoard);\n  const [mouseDown, setMouseDown] = useState(false);\n  const [node, setNode] = useState({});\n\n  useEffect(() => {\n    const board = new Board();\n    board.manufactureGrid();\n    board.dom.assignGraphOfSize(numberOfRows);\n    dispatch(setBoard(board));\n  }, [dispatch]);\n\n  const handleMouseLeave = (e) => {\n    setNode({ ...node, currentlyMoving: false });\n    setMouseDown(false);\n  };\n  if (!Object.keys(board).length) {\n    return (\n      <div className=\"loader\">\n        <h3>Loading Grid</h3>\n      </div>\n    );\n  }\n  const { innerHeight, offsetHeight } = board.getDimensions(numberOfRows);\n  return (\n    <div className=\"grid-container\">\n      <div className=\"grid\">\n        <table\n          className=\"grid-table\"\n          id=\"grid-table\"\n          onMouseLeave={handleMouseLeave}\n        >\n          <tbody>\n            {[...Array(innerHeight).keys()].map((row) => (\n              <tr key={row} id={`row-${row}`}>\n                <Gridrow\n                  key={row}\n                  currentRow={row + offsetHeight}\n                  mouseDown={mouseDown}\n                  setMouseDown={setMouseDown}\n                  node={node}\n                  setNode={setNode}\n                  numberOfRows={numberOfRows}\n                />\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { Nav } from \"../components/nav/Nav\";\nimport { Grid } from \"../components/grid/Grid\";\nimport \"./index.css\";\n\nexport const App = () => {\n  const [numberOfRows, setNumberOfRows] = useState(5);\n  return (\n    <main className=\"App\">\n      <Nav numberOfRows={numberOfRows} setNumberOfRows={setNumberOfRows} />\n      <Grid numberOfRows={numberOfRows} />\n    </main>\n  );\n};\n","import { configureStore }  from '@reduxjs/toolkit';\nimport boardReducer from '../components/grid/boardSlice';\n\n\nexport const store =  configureStore({\n    reducer: {\n        board: boardReducer\n    }\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport { App } from './app/App';\nimport { store } from './app/store'\n\n  ReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n  )"],"sourceRoot":""}