{"version":3,"sources":["components/grid/boardSlice.js","components/nav/Nav.js","components/grid/Gridrow.js","app/store.js","algorithms/dijkstras.js","Classes/DOMController.js","Classes/Node.js","Classes/Board.js","components/grid/Grid.js","app/App.js","index.js"],"names":["boardSlice","createSlice","name","initialState","board","reducers","setBoard","state","action","payload","updateGrid","actions","selectBoard","Nav","slider","setSlider","useSelector","useState","speed","setSpeed","checked","setChecked","handleClick","a","domController","setAnimations","updatePathDistance","solved","runDijkstra","className","id","onMouseLeave","error","onClick","clearBoard","type","value","target","toggleDistances","style","margin","for","width","onChange","e","removeVisited","manufactureGraph","min","max","updateSpeed","paddingRight","textAlign","Gridrow","mouseDown","setMouseDown","node","setNode","currentRow","handleMouseDown","preventDefault","grabNode","isNode","currentlyMoving","addRemoveWall","handleMouseUp","handleMouseEnter","placeNode","getDimensions","innerWidth","offsetWidth","Array","keys","map","col","graph","grid","cName","hasItem","items","onMouseEnter","onMouseDown","onMouseUp","getSpecs","store","configureStore","reducer","boardReducer","lowestCostNode","costs","processed","Object","reduce","lowest","includes","dijkstra","getState","walls","start","end","distance","path","assign","Infinity","neighbors","parents","wall","child","myPromise","Promise","resolve","reject","visitedNodes","cost","children","n","newCost","push","printVisited","animateVisited","visited","optimalPath","parent","reverse","results","shift","pop","DOMController","this","disabled","numberOfRows","verticalPixelCount","document","querySelector","setProperty","disable","console","log","cssRoot","forEach","getElementById","keyword","body","styleName","innerHTML","el","transform","x","y","st","split","xs","ys","Number","pathName","makePath","changeState","i","interval","setInterval","length","clearInterval","hasPath","Node","item","unshift","newState","Board","height","size","innerHeight","assignNodes","j","findNeighbors","nodetype","dom","clearStartStyle","nodeInBoundary","assignGraphOfSize","classname","addWall","splice","indexOf","removeWall","autoSolve","prevId","newId","clearTransform","prevNode","newNode","shiftItems","unShiftItems","disableInteraction","result","startNode","isNotWall","noPathFound","pointToPath","printPath","animatePath","clearWalls","makeUnvisited","clear","removeSpec","speedValue","updateAnimationSpeed","vertMiddle","Math","floor","horzFirstThird","horzLastThird","offsetHeight","row","conceptualPixelCount","window","numberOfColumns","right","left","up","down","Grid","dispatch","useDispatch","bool","useEffect","manufactureGrid","getRows","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.23bd5dab.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst boardSlice = createSlice({\n  name: \"board\",\n  initialState: {\n    board: {},\n  },\n  reducers: {\n    setBoard(state, action) {\n      return {\n        board: action.payload,\n      };\n    },\n    updateGrid(state, action) {\n      //this.state.board.grid = action.payload\n    },\n  },\n});\n\n//Actions\n/////////////////////////////////////////////////////////////\nexport const { setBoard, updateGrid } = boardSlice.actions;\n\n//Reducer\n/////////////////////////////////////////////////////////////\nexport default boardSlice.reducer;\n\n//Selectors\n/////////////////////////////////////////////////////////////\nexport const selectBoard = (state) => state.board;\n","import React, { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectBoard } from \"../grid/boardSlice\";\n\nexport const Nav = ({ slider, setSlider }) => {\n  const { board } = useSelector(selectBoard);\n\n  const [speed, setSpeed] = useState(100);\n  const [checked, setChecked] = useState(true);\n\n  const handleClick = async () => {\n    board.domController.setAnimations(\"on\");\n    board.domController.updatePathDistance(\"Searching...\");\n    board.solved = false;\n    board.runDijkstra();\n  };\n  const handleClear = () => {\n    board.solved = false;\n    board.clearBoard(true);\n  };\n  const handleChange = (e) => {\n    board.domController.setAnimations(\"off\");\n    board.removeVisited(slider);\n    setSlider(board.manufactureGraph(e.target.value) || slider);\n  };\n\n  const handleMouseLeave = () => {\n    try {\n      board.domController.setAnimations(\"on\");\n    } catch (error) {}\n  };\n  const handleViewDistance = ({ target }) => {\n    board.domController.toggleDistances(checked);\n    setChecked(checked ? false : true);\n  };\n\n  const handleChangeSpeed = ({ target }) => {\n    setSpeed(target.value);\n    board.updateSpeed(target.value);\n  };\n  return (\n    <div className=\"nav\" id=\"nav\" onMouseLeave={handleMouseLeave}>\n      <div className=\"nav-title\">\n        <h1>Path Visualizer</h1>\n      </div>\n      <div className=\"controls\">\n        <div className=\"algo-button\">\n          <button onClick={handleClick} id=\"algo-button\">\n            <strong>Run</strong>\n          </button>\n          <h3></h3>\n        </div>\n        <div className=\"clear-button\">\n          <button onClick={handleClear} id=\"clear-button\">\n            <strong>Clear</strong>\n          </button>\n        </div>\n        <div className=\"view-distance\">\n          <input\n            type=\"checkbox\"\n            value={checked}\n            onClick={handleViewDistance}\n            id=\"view-distance\"\n          />\n          <label>Show Distances</label>\n        </div>\n      </div>\n      <div className=\"settings-container\">\n        <div className=\"settings\">\n          <h2 id=\"settings-title\" style={{ margin: 0 }}>\n            Settings:\n          </h2>\n          <div className=\"slider\">\n            <label for=\"slider\" style={{ width: 200 }}>\n              Rows: {slider}\n            </label>\n            <input\n              onChange={handleChange}\n              type=\"range\"\n              value={slider}\n              id=\"slider\"\n              min=\"5\"\n              max=\"20\"\n            ></input>\n          </div>\n          <div className=\"speed\">\n            <label for=\"speed\" style={{ width: 200 }}>\n              Speed: {speed}ms\n            </label>\n            <input\n              onChange={handleChangeSpeed}\n              type=\"range\"\n              value={speed}\n              id=\"speed\"\n              name=\"speed\"\n              min=\"10\"\n              max=\"300\"\n            ></input>\n          </div>\n        </div>\n        <div className=\"distance\">\n          <p style={{ paddingRight: 10 }}>Path Distance: </p>\n          <p id=\"distance\" style={{ width: 80, textAlign: \"center\" }}>\n            Infinity\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectBoard } from \"./boardSlice\";\n\nexport const Gridrow = ({\n  mouseDown,\n  setMouseDown,\n  node,\n  setNode,\n  currentRow,\n  slider,\n  setSlider,\n}) => {\n  const { board } = useSelector(selectBoard);\n\n  const handleMouseDown = (e) => {\n    e.preventDefault();\n    board.domController.grabNode(\"grabbing\");\n    if (board.isNode(e.target.id))\n      setNode({ currentlyMoving: true, type: e.target });\n    board.addRemoveWall(e.target);\n    setMouseDown(true);\n  };\n  const handleMouseUp = () => {\n    board.domController.grabNode(\"grab\");\n    setNode({ ...node, currentlyMoving: false });\n    setMouseDown(false);\n  };\n  const handleMouseEnter = ({ target }) => {\n    if (node.currentlyMoving) {\n      board.placeNode(node.type.className, node.type.id, target.id);\n      setNode({ ...node, type: target });\n    } else if (mouseDown) board.addRemoveWall(target);\n  };\n\n  const { innerWidth, offsetWidth } = board.getDimensions(slider);\n  return [...Array(innerWidth).keys()].map((col) => {\n    let id = `${currentRow}-${col + offsetWidth}`;\n    board.graph[id] = board.grid[id];\n    let cName = board.grid[id].hasItem()\n      ? board.grid[id].items[0]\n      : board.grid[id].state;\n    return (\n      <td\n        key={col}\n        id={id}\n        className={cName}\n        onMouseEnter={handleMouseEnter}\n        onMouseDown={handleMouseDown}\n        onMouseUp={handleMouseUp}\n      >\n        <div className=\"specs\" id={`specs-${id}`}>\n          {board.grid[id].getSpecs()}\n        </div>\n      </td>\n    );\n  });\n};\n","import { configureStore }  from '@reduxjs/toolkit';\nimport boardReducer from '../components/grid/boardSlice';\n\n\nexport const store =  configureStore({\n    reducer: {\n        board: boardReducer\n    }\n})","import { store } from \"../app/store\";\n\nconst lowestCostNode = (costs, processed) => {\n  return Object.keys(costs).reduce((lowest, node) => {\n    if (lowest === null || costs[node] < costs[lowest]) {\n      if (!processed.includes(node)) lowest = node;\n    }\n    return lowest;\n  }, null);\n};\n\nexport const dijkstra = async () => {\n  const board = store.getState().board.board;\n\n  const { walls, graph, start, end, speed } = board;\n  if (start === end) {\n    return {\n      distance: 0,\n      path: [],\n    };\n  }\n  const costs = Object.assign({ end: Infinity }, graph[start].neighbors);\n  const parents = { end: null };\n  const processed = [];\n  for (let wall of walls) {\n    if (costs[wall]) {\n      delete costs[wall];\n    }\n  }\n  for (let child in graph[start].neighbors) {\n    if (\n      graph[child] &&\n      !Object.keys(graph[start].neighbors).includes(end) &&\n      !walls.includes(child)\n    ) {\n      graph[child].distance = 1;\n    }\n    parents[child] = start;\n  }\n\n  let node = lowestCostNode(costs, processed);\n\n  const myPromise = new Promise((resolve, reject) => {\n    let visitedNodes = [];\n\n    while (true) {\n      let cost = costs[node];\n      let children;\n      if (graph[node]) {\n        children = graph[node].neighbors;\n      } else {\n        children = {};\n      }\n      for (let n in children) {\n        if (!walls.includes(n) || n === end) {\n          let newCost = cost + children[n];\n          if (!costs[n]) {\n            costs[n] = newCost;\n            parents[n] = node;\n          }\n          if (costs[n] > newCost) {\n            costs[n] = newCost;\n            parents[n] = node;\n          }\n        }\n      }\n\n      if (\n        graph[node] &&\n        !board.isNode(node) &&\n        !board.isNode(node) &&\n        !walls.includes(node)\n      ) {\n        visitedNodes.push(node);\n        graph[node].distance = costs[node];\n      }\n\n      if (node === end) {\n        break;\n      }\n      processed.push(node);\n      node = lowestCostNode(costs, processed);\n      if (node === null) {\n        break;\n      }\n    }\n\n    if (board.solved) {\n      board.domController.printVisited(visitedNodes, parents[end]);\n      resolve(visitedNodes);\n    } else {\n      board.domController.animateVisited(visitedNodes, resolve);\n    }\n  });\n\n  let visited = await myPromise;\n\n  let optimalPath = [end];\n  let parent = parents[end];\n  delete parents[start];\n\n  if (!parent) {\n    return {\n      distance: Infinity,\n      path: visited,\n    };\n  }\n\n  while (parent) {\n    optimalPath.push(parent);\n    parent = parents[parent];\n  }\n\n  optimalPath.reverse();\n\n  const results = {\n    distance: costs[end],\n    path: optimalPath,\n  };\n  results.path.shift();\n  results.path.pop();\n  return results;\n};\n","export class DOMController {\n  constructor(board) {\n    this.board = board;\n    this.disabled = false;\n  }\n  assignGraphOfSize(numberOfRows) {\n    const { verticalPixelCount } = this.board.getDimensions(numberOfRows);\n    const cssRoot = document.querySelector(\":root\");\n    cssRoot.style.setProperty(\"--size\", `${verticalPixelCount}px`);\n  }\n  disableInteraction(disable) {\n    this.disabled = disable;\n    console.log(this.disabled);\n    //Disable Grid Table\n    const cssRoot = document.querySelector(\":root\");\n    if (disable) {\n      cssRoot.style.setProperty(\"--grid-cursor\", `default`);\n      cssRoot.style.setProperty(\"--grid-interact\", `none`);\n    } else {\n      cssRoot.style.setProperty(\"--grid-cursor\", `pointer`);\n      cssRoot.style.setProperty(\"--grid-interact\", `auto`);\n    }\n    //Disable NavBar\n    const navItemIds = [\"algo-button\", \"clear-button\", \"slider\", \"speed\"];\n    navItemIds.forEach(\n      (id) => (document.getElementById(id).disabled = disable)\n    );\n  }\n  setAnimations(keyword) {\n    if (keyword === \"on\") {\n      document.body.style.setProperty(\"--toggle\", \"1\");\n      document.body.style.setProperty(\"--playState\", \"idle\");\n    } else if (keyword === \"off\") {\n      document.body.style.setProperty(\"--toggle\", \"0\");\n      document.body.style.setProperty(\"--playState\", \"finished\");\n    }\n  }\n  grabNode(styleName) {\n    const cssRoot = document.querySelector(\":root\");\n    cssRoot.style.setProperty(\"--node-cursor\", styleName);\n  }\n  toggleDistances(checked) {\n    const cssRoot = document.querySelector(\":root\");\n    if (checked) {\n      cssRoot.style.setProperty(\"--visibility\", `visible`);\n    } else {\n      cssRoot.style.setProperty(\"--visibility\", `hidden`);\n    }\n  }\n  updateAnimationSpeed() {\n    document.body.style.setProperty(\"--visit-delay\", `${this.board.speed}ms`);\n    document.body.style.setProperty(\n      \"--animation-speed-visited\",\n      `${this.board.speed * 5}ms`\n    );\n  }\n  clearStartStyle() {\n    document.getElementById(this.board.start).style = \"\";\n  }\n  addWall(target) {\n    target.className = \"wall\";\n    document.getElementById(`specs-${target.id}`).innerHTML = \"\";\n  }\n  removeWall(target) {\n    target.className = \"unvisited\";\n    document.getElementById(`specs-${target.id}`).innerHTML = \"\";\n  }\n  clearTransform(id) {\n    let el = document.getElementById(id);\n    if (el.style.transform) {\n      el.style = \"\";\n    }\n  }\n  updatePathDistance(distance) {\n    document.getElementById(\"distance\").innerHTML = distance;\n  }\n  noPathFound(id) {\n    if (!this.board.isNode(id)) {\n      document.getElementById(id).className = \"deepred\";\n    }\n  }\n  pointToPath(node) {\n    //TODO more elegant way of rotating start\n    let st = document.getElementById(this.board.start);\n    let x, y;\n    if (!node) {\n      [x, y] = this.board.end.split(\"-\");\n    } else {\n      [x, y] = node.split(\"-\");\n    }\n    let [xs, ys] = this.board.start.split(\"-\");\n    //Left\n    if (Number(ys) - 1 === Number(y)) {\n      st.style.transform = \"rotate(180deg)\";\n    }\n    //Right\n    else if (Number(ys) + 1 === Number(y)) {\n    }\n    //Down\n    else if (Number(xs) - 1 === Number(x)) {\n      st.style.transform = \"rotate(-90deg)\";\n    }\n    //Up\n    else if (Number(xs) + 1 === Number(x)) {\n      st.style.transform = \"rotate(90deg)\";\n    }\n  }\n  makePath(id, pathName) {\n    let el = document.getElementById(id);\n    if (el) {\n      el.className = pathName;\n    }\n  }\n  printPath(path) {\n    path.forEach((id) => {\n      const pathName = \"path-immediate\";\n      const node = this.board.grid[id];\n      this.makePath(id, pathName);\n      node.changeState(pathName);\n    });\n  }\n  animatePath(path) {\n    let i = 0;\n    const interval = setInterval(() => {\n      if (path.length) {\n        const id = path[i];\n        const pathName = \"path\";\n        const node = this.board.grid[id];\n        this.makePath(id, pathName);\n        node.changeState(pathName);\n      }\n      i++;\n      if (i >= path.length) clearInterval(interval);\n    }, this.board.speed);\n  }\n  printVisited(visited, hasPath) {\n    const pathName = !hasPath ? \"deepred\" : \"visited-immediate\";\n    visited.forEach((id) => {\n      document.getElementById(`specs-${id}`).innerHTML =\n        this.board.grid[id].getSpecs();\n      document.getElementById(id).className = pathName;\n      this.board.grid[id].changeState(pathName);\n    });\n  }\n  animateVisited(visited, resolve) {\n    let i = 0;\n    const pathName = \"visited\";\n    const interval = setInterval(() => {\n      if (visited.length) {\n        document.getElementById(visited[i]).className = \"visited\";\n        document.getElementById(`specs-${visited[i]}`).innerHTML =\n          this.board.grid[visited[i]].getSpecs();\n        this.board.grid[visited[i]].changeState(\"visited\");\n      }\n      i++;\n      if (!visited[i]) {\n        clearInterval(interval);\n        resolve(visited);\n      }\n    }, this.board.speed);\n  }\n  makeUnvisited(id) {\n    document.getElementById(id).className = \"unvisited\";\n  }\n  removeSpec(id) {\n    document.getElementById(`specs-${id}`).innerHTML = \"\";\n  }\n  clearWalls(id) {\n    if (!this.board.isNode(id)) {\n      document.getElementById(id).className = \"unvisited\";\n    }\n  }\n}\n","export class Node {\n  constructor(id, neighbors, items = []) {\n    this.id = id;\n    this.neighbors = neighbors;\n    this.items = items;\n    this.state = \"unvisited\";\n    this.distance = \"\";\n  }\n  getSpecs() {\n    return this.distance;\n  }\n  hasItem() {\n    return this.items.length > 0;\n  }\n  isNotWall() {\n    return this.state !== \"wall\";\n  }\n  addWall() {\n    this.state = \"wall\";\n    this.distance = \"\";\n  }\n  removeWall() {\n    this.state = \"unvisited\";\n  }\n  shiftItems() {\n    this.items.shift();\n  }\n  unShiftItems(item) {\n    this.items.unshift(item);\n  }\n  clear() {\n    this.state = \"unvisited\";\n    this.distance = \"\";\n  }\n  changeState(newState) {\n    this.state = newState;\n  }\n}\n","import { dijkstra } from \"../algorithms/dijkstras\";\nimport { DOMController } from \"./DOMController\";\nimport { Node } from \"./Node\";\n\nexport class Board {\n  constructor() {\n    this.domController = {};\n    this.start = \"0-0\";\n    this.end = \"0-0\";\n    this.width = 0;\n    this.height = 0;\n    this.walls = [];\n    this.grid = {};\n    this.graph = {};\n    this.solved = false;\n    this.speed = 100;\n  }\n  manufactureGrid(size = 20) {\n    const { innerHeight, innerWidth } = this.getDimensions(size);\n    this.height = innerHeight;\n    this.width = innerWidth;\n\n    this.assignNodes(this.width, this.height);\n\n    for (let i = 0; i < this.height; i++) {\n      for (let j = 0; j < this.width; j++) {\n        const id = `${i}-${j}`;\n        const neighbors = this.findNeighbors(i, j);\n        this.grid[id] = new Node(id, neighbors, this.nodetype(id));\n      }\n    }\n    this.domController = new DOMController(this);\n  }\n  manufactureGraph(numberOfRows) {\n    const dom = this.domController;\n    dom.clearStartStyle();\n    if (\n      this.nodeInBoundary(this.start, numberOfRows) &&\n      this.nodeInBoundary(this.end, numberOfRows)\n    ) {\n      this.graph = {};\n      dom.assignGraphOfSize(numberOfRows);\n      return numberOfRows;\n    }\n  }\n  addRemoveWall(target) {\n    const classname = target.className;\n    const node = this.grid[target.id];\n    const dom = this.domController;\n    if (\n      classname === \"unvisited\" ||\n      classname === \"visited\" ||\n      classname === \"path\" ||\n      classname === \"visited-immediate\" ||\n      classname === \"path-immediate\" ||\n      classname === \"deepred\"\n    ) {\n      this.walls.push(target.id);\n      node.addWall();\n      dom.addWall(target);\n    } else if (target.className === \"wall\") {\n      this.walls.splice(this.walls.indexOf(target.id), 1);\n      node.removeWall();\n      dom.removeWall(target);\n    }\n    this.autoSolve(\"wall\", target.id);\n  }\n  placeNode(name, prevId, newId) {\n    this.domController.clearTransform(prevId);\n    const prevNode = this.grid[prevId];\n    const newNode = this.grid[newId];\n    prevNode.shiftItems();\n    newNode.unShiftItems(name);\n    if (name === \"start-node\") this.start = newId;\n    else if (name === \"end-node\") this.end = newId;\n    this.autoSolve(\"node\");\n  }\n\n  autoSolve(type, id) {\n    if (!this.domController.disabled) {\n      if (type === \"wall\") {\n        if (this.solved && !this.isNode(id)) {\n          this.runDijkstra();\n        }\n      } else {\n        if (this.solved) {\n          this.runDijkstra();\n        }\n      }\n    }\n  }\n  async runDijkstra() {\n    const dom = this.domController;\n    dom.disableInteraction(true);\n    this.clearBoard(false);\n    let result = await dijkstra();\n    dom.updatePathDistance(result.distance);\n    dom.disableInteraction(false);\n    if (result.distance === Infinity) {\n      const startNode = this.grid[this.start];\n      if (startNode.isNotWall()) startNode.changeState(\"deepred\");\n      result.path.forEach((id) => {\n        const node = this.grid[id];\n        dom.noPathFound(id);\n        node.changeState(\"deepred\");\n      });\n      this.solved = false;\n      return;\n    }\n\n    dom.pointToPath(result.path[0]);\n\n    if (this.solved) {\n      dom.printPath(result.path);\n    } else {\n      this.solved = true;\n      dom.animatePath(result.path);\n    }\n  }\n  clearBoard(clearWalls) {\n    const dom = this.domController;\n    dom.updatePathDistance(\"Infinity\");\n    for (let id in this.graph) {\n      const node = this.grid[id];\n      if (\n        node.state === \"visited\" ||\n        node.state === \"path\" ||\n        node.state === \"visited-immediate\" ||\n        node.state === \"path-immediate\" ||\n        node.state === \"deepred\"\n      ) {\n        if (!node.hasItem()) {\n          dom.makeUnvisited(id);\n        }\n        node.clear();\n        dom.removeSpec(id);\n      }\n      if (this.walls.includes(id) && clearWalls) {\n        dom.clearWalls(id);\n        node.removeWall();\n        this.walls.splice(this.walls.indexOf(id), 1);\n      }\n    }\n  }\n  removeVisited(numberOfRows) {\n    for (let id in this.grid) {\n      const node = this.grid[id];\n      if (!this.nodeInBoundary(id, numberOfRows) && !this.walls.includes(id)) {\n        node.clear();\n      }\n    }\n  }\n  updateSpeed(speedValue) {\n    this.speed = speedValue;\n    this.domController.updateAnimationSpeed();\n  }\n  assignNodes(width, height) {\n    const vertMiddle = Math.floor(height / 2) - 1;\n    const horzFirstThird = Math.floor(width / 2) - 3;\n    const horzLastThird = width - Math.floor(width / 2) + 2;\n\n    this.start = `${vertMiddle}-${horzFirstThird}`;\n    this.end = `${vertMiddle}-${horzLastThird}`;\n  }\n  nodeInBoundary(node, numberOfRows) {\n    const { innerHeight, offsetHeight, innerWidth, offsetWidth } =\n      this.getDimensions(numberOfRows);\n    const row = Number(node.split(\"-\")[0]);\n    const col = Number(node.split(\"-\")[1]);\n    const bottom = innerHeight - 1 + offsetHeight;\n    const right = innerWidth - 1 + offsetWidth;\n    const left = offsetWidth;\n    const top = offsetHeight;\n\n    return row <= bottom && row >= top && col <= right && col >= left;\n  }\n  getDimensions(numberOfRows) {\n    const navHeight = 75;\n    const boarderPixelCount = 3;\n    const conceptualPixelCount =\n      (window.innerHeight - navHeight) / numberOfRows;\n    const verticalPixelCount = conceptualPixelCount - boarderPixelCount;\n    const numberOfColumns = window.innerWidth / conceptualPixelCount;\n    const innerHeight = Number(numberOfRows);\n    //const innerWidth = Math.floor(numberOfColumns);\n    let innerWidth = Math.floor(numberOfColumns) - 1;\n    if (innerWidth > 40) innerWidth = 40;\n    if (innerWidth < 8) innerWidth = 8;\n    const offsetHeight = Math.floor((this.height - innerHeight) / 2);\n    const offsetWidth = Math.floor((this.width - innerWidth) / 2);\n\n    return {\n      verticalPixelCount,\n      innerHeight,\n      offsetHeight,\n      innerWidth,\n      offsetWidth,\n    };\n  }\n  findNeighbors(i, j) {\n    const right = j + 1 > this.width - 1 ? null : `${i}-${j + 1}`;\n    const left = j - 1 < 0 ? null : `${i}-${j - 1}`;\n    const up = i + 1 > this.height - 1 ? null : `${i + 1}-${j}`;\n    const down = i - 1 < 0 ? null : `${i - 1}-${j}`;\n    return { [right]: 1, [left]: 1, [up]: 1, [down]: 1 };\n  }\n  isNode(id) {\n    if (id === this.start || id === this.end) {\n      return true;\n    }\n  }\n  nodetype(id) {\n    if (id === this.start) {\n      return [\"start-node\"];\n    } else if (id === this.end) {\n      return [\"end-node\"];\n    } else {\n      return [];\n    }\n  }\n}\n","import React, { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setBoard, selectBoard } from \"./boardSlice\";\nimport { Gridrow } from \"./Gridrow\";\nimport { Board } from \"../../Classes/Board\";\n\nexport const Grid = ({ slider, setSlider }) => {\n  const { board } = useSelector(selectBoard);\n  const dispatch = useDispatch();\n  const [mouseDown, setMouseDown] = useState(false);\n  const [node, setNode] = useState({ target: null, bool: false });\n\n  useEffect(() => {\n    let board = new Board();\n    board.manufactureGrid();\n    board.domController.assignGraphOfSize(slider);\n    dispatch(setBoard(board));\n  }, [dispatch]);\n  const handleMouseLeave = (e) => {\n    setNode({ ...node, currentlyMoving: false });\n    setMouseDown(false);\n  };\n  if (!Object.keys(board).length) {\n    return (\n      <div className=\"loader\">\n        <h3>Loading Grid</h3>\n      </div>\n    );\n  }\n  const getRows = () => {\n    const { innerHeight, offsetHeight } = board.getDimensions(slider);\n    return [...Array(innerHeight).keys()].map((row) => (\n      <tr key={row} id={`row-${row}`}>\n        <Gridrow\n          key={row}\n          currentRow={row + offsetHeight}\n          mouseDown={mouseDown}\n          setMouseDown={setMouseDown}\n          node={node}\n          setNode={setNode}\n          slider={slider}\n          setSlider={setSlider}\n        />\n      </tr>\n    ));\n  };\n  return (\n    <div className=\"grid-container\">\n      <div className=\"grid\">\n        <table\n          className=\"grid-table\"\n          id=\"grid-table\"\n          onMouseLeave={handleMouseLeave}\n        >\n          <tbody>{getRows()}</tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { Nav } from \"../components/nav/Nav\";\nimport { Grid } from \"../components/grid/Grid\";\nimport \"./index.css\";\n\nexport const App = () => {\n  const [slider, setSlider] = useState(5);\n  return (\n    <main className=\"App\">\n      <Nav slider={slider} setSlider={setSlider} />\n      <Grid slider={slider} setSlider={setSlider} />\n    </main>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport { App } from './app/App';\nimport { store } from './app/store'\n\n  ReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n  )"],"sourceRoot":""}