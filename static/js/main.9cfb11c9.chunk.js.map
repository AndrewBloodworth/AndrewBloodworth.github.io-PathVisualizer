{"version":3,"sources":["components/grid/boardSlice.js","components/nav/Nav.js","components/grid/Gridrow.js","app/store.js","algorithms/dijkstras.js","Board.js","components/grid/Grid.js","app/App.js","index.js"],"names":["boardSlice","createSlice","name","initialState","board","reducers","setBoard","state","action","payload","updateGrid","actions","selectBoard","Nav","slider","setSlider","useSelector","useState","speed","setSpeed","useEffect","document","body","style","setProperty","handleClick","a","setAnimations","getElementById","innerHTML","solved","runDijkstra","className","id","onMouseLeave","error","onClick","clearBoard","margin","for","width","onChange","e","removeVisited","manufactureGrid","target","value","type","min","max","updateSpeed","paddingRight","textAlign","Gridrow","mouseDown","setMouseDown","node","setNode","currentRow","handleMouseDown","preventDefault","querySelector","isNode","currentlyMoving","addRemoveWall","handleMouseUp","handleMouseEnter","placeNode","dimensions","getDimensions","Array","innerWidth","keys","map","col","offsetWidth","graph","grid","cName","items","length","onMouseEnter","onMouseDown","onMouseUp","getSpecs","store","configureStore","reducer","boardReducer","lowestCostNode","costs","processed","Object","reduce","lowest","includes","dijkstra","getState","walls","start","end","distance","path","assign","Infinity","neighbors","parents","wall","child","myPromise","Promise","resolve","reject","visitedNodes","cost","children","n","newCost","el","push","v","specEl","pathName","i","interval","setInterval","clearInterval","visited","optimalPath","parent","reverse","results","shift","pop","Node","this","Board","height","algoQueue","numberOfRows","nodeInBoundary","assignGridOfSize","verticalPixelCount","row","Number","split","bottom","innerHeight","offsetHeight","right","left","top","conceptualPixelCount","window","numberOfColumns","Math","floor","vertMiddle","horzFirstThird","horzLastThird","size","assignNodes","j","findNeighbors","nodetype","up","down","speedValue","keyword","classname","splice","indexOf","transform","unshift","disable","cssRoot","forEach","disabled","disableNavBar","disableGridTable","result","st","x","y","xs","ys","box","clearWalls","hasItem","Grid","dispatch","useDispatch","bool","manufactureGraph","getRows","App","ReactDOM","render"],"mappings":"0NAEMA,EAAaC,YAAY,CAC7BC,KAAM,QACNC,aAAc,CACZC,MAAO,IAETC,SAAU,CACRC,SADQ,SACCC,EAAOC,GACd,MAAO,CACLJ,MAAOI,EAAOC,UAGlBC,WANQ,SAMGH,EAAOC,QAQf,EAAiCR,EAAWW,QAApCL,EAAR,EAAQA,SAIAN,GAJR,EAAkBU,WAIVV,EAAf,SAIaY,EAAc,SAACL,GAAD,OAAWA,EAAMH,O,OCzB/BS,EAAM,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,OAAQC,EAAgB,EAAhBA,UACpBX,EAAUY,YAAYJ,GAAtBR,MAER,EAA0Ba,mBAAS,KAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAEAC,qBAAU,WACRC,SAASC,KAAKC,MAAMC,YAAY,gBAAhC,UAAoD,IAApD,OACAH,SAASC,KAAKC,MAAMC,YAClB,4BADF,UAEK,IAFL,SAIC,IACH,IAAMC,EAAW,uCAAG,sBAAAC,EAAA,sDAClBtB,EAAMuB,cAAc,MACpBN,SAASO,eAAe,YAAYC,UAAY,eAChDzB,EAAM0B,QAAS,EACf1B,EAAM2B,cAJY,2CAAH,qDA2BjB,OACE,sBAAKC,UAAU,MAAMC,GAAG,MAAMC,aAXP,WACvB,IACE9B,EAAMuB,cAAc,MACpB,MAAOQ,MAQT,UACE,qBAAKH,UAAU,YAAf,SACE,mDAEF,qBAAKA,UAAU,cAAf,SACE,wBAAQI,QAASX,EAAaQ,GAAG,cAAjC,6BAIF,qBAAKD,UAAU,eAAf,SACE,wBAAQI,QAhCM,WAClBhC,EAAM0B,QAAS,EACf1B,EAAMiC,YAAW,IA8BiBJ,GAAG,eAAjC,2BAIF,sBAAKD,UAAU,qBAAf,UACE,oBAAIT,MAAO,CAAEe,OAAQ,GAArB,uBACA,sBAAKN,UAAU,WAAf,UACE,sBAAKA,UAAU,SAAf,UACE,wBAAOO,IAAI,SAAShB,MAAO,CAAEiB,MAAO,IAApC,mBACS1B,KAET,uBACE2B,SAxCS,SAACC,GACpBtC,EAAMuB,cAAc,OACpBvB,EAAMuC,cAAc7B,GAEpBC,EAAUX,EAAMwC,gBAAgBF,EAAEG,OAAOC,QAAUhC,IAqCzCiC,KAAK,QACLD,MAAOhC,EACPmB,GAAG,SACH/B,KAAK,SACL8C,IAAI,IACJC,IAAI,UAGR,sBAAKjB,UAAU,QAAf,UACE,wBAAOO,IAAI,QAAQhB,MAAO,CAAEiB,MAAO,IAAnC,oBACUtB,EADV,QAGA,uBACEuB,SAzCc,SAAC,GAAgB,IAAdI,EAAa,EAAbA,OAC3B1B,EAAS0B,EAAOC,OAChB1C,EAAM8C,YAAYL,EAAOC,QAwCfC,KAAK,QACLD,MAAO5B,EACPe,GAAG,QACH/B,KAAK,QACL8C,IAAI,KACJC,IAAI,WAGR,sBAAKjB,UAAU,WAAf,UACE,mBAAGT,MAAO,CAAE4B,aAAc,IAA1B,6BACA,mBAAGlB,GAAG,WAAWV,MAAO,CAAEiB,MAAO,GAAIY,UAAW,UAAhD,4BAKJ,qBAAKpB,UAAU,uB,eC5FVqB,EAAU,SAAC,GAQjB,IAPLC,EAOI,EAPJA,UACAC,EAMI,EANJA,aACAC,EAKI,EALJA,KACAC,EAII,EAJJA,QACAC,EAGI,EAHJA,WACA5C,EAEI,EAFJA,OAGQV,GADJ,EADJW,UAEkBC,YAAYJ,GAAtBR,OAEFuD,EAAkB,SAACjB,GACvBA,EAAEkB,iBACcvC,SAASwC,cAAc,SAC/BtC,MAAMC,YAAY,gBAA1B,YACIpB,EAAM0D,OAAOpB,EAAEG,OAAOZ,KACxBwB,EAAQ,CAAEM,iBAAiB,EAAMhB,KAAML,EAAEG,OAAOb,YAClD5B,EAAM4D,cAActB,EAAEG,QACtBU,GAAa,IAETU,EAAgB,WACJ5C,SAASwC,cAAc,SAC/BtC,MAAMC,YAAY,gBAA1B,QACAiC,EAAQ,2BAAKD,GAAN,IAAYO,iBAAiB,KACpCR,GAAa,IAETW,EAAmB,SAAC,GAAgB,IAAdrB,EAAa,EAAbA,OACtBW,EAAKO,iBACP3D,EAAM+D,UAAUX,EAAKT,KAAMF,EAAOZ,IAClCwB,EAAQ,eAAKD,KACJF,GAAWlD,EAAM4D,cAAcnB,IAGtCuB,EAAahE,EAAMiE,cAAcvD,GACvC,OAAO,YAAIwD,MAAMF,EAAWG,YAAYC,QAAQC,KAAI,SAACC,GACnD,IAAIzC,EAAE,UAAMyB,EAAN,YAAoBgB,EAAMN,EAAWO,aAC3CvE,EAAMwE,MAAM3C,GAAM7B,EAAMyE,KAAK5C,GAC7B,IAAI6C,EACF1E,EAAMyE,KAAK5C,GAAI8C,MAAMC,OAAS,EAC1B5E,EAAMyE,KAAK5C,GAAI8C,MAAM,GACrB3E,EAAMyE,KAAK5C,GAAI1B,MACrB,OACE,oBAEE0B,GAAIA,EACJD,UAAW8C,EACXG,aAAcf,EACdgB,YAAavB,EACbwB,UAAWlB,EANb,SAQE,qBAAKjC,UAAU,QAAQC,GAAE,gBAAWA,GAApC,SACG7B,EAAMyE,KAAK5C,GAAImD,cARbV,O,+BC3CAW,EAASC,YAAe,CACjCC,QAAS,CACLnF,MAAOoF,KCJTC,EAAiB,SAACC,EAAOC,GAC7B,OAAOC,OAAOpB,KAAKkB,GAAOG,QAAO,SAACC,EAAQtC,GAIxC,OAHe,OAAXsC,GAAmBJ,EAAMlC,GAAQkC,EAAMI,MACpCH,EAAUI,SAASvC,KAAOsC,EAAStC,IAEnCsC,IACN,OAGQE,EAAQ,uCAAG,gEAAAtE,EAAA,yDAChBtB,EAAQiF,EAAMY,WAAW7F,MAAMA,MAE7B8F,EAAoC9F,EAApC8F,MAAOtB,EAA6BxE,EAA7BwE,MAAOuB,EAAsB/F,EAAtB+F,MAAOC,EAAehG,EAAfgG,IAAKlF,EAAUd,EAAVc,MAC9BiF,IAAUC,EAJQ,yCAKb,CACLC,SAAU,EACVC,KAAM,KAPY,OAUhBZ,EAAQE,OAAOW,OAAO,CAAEH,IAAKI,KAAY5B,EAAMuB,GAAOM,WACtDC,EAAU,CAAEN,IAAK,MACjBT,EAAY,GAZI,cAaLO,GAbK,IAatB,2BAASS,EAAe,QAClBjB,EAAMiB,WACDjB,EAAMiB,GAfK,8BAkBtB,IAASC,KAAShC,EAAMuB,GAAOM,WAE3B7B,EAAMgC,IACLhB,OAAOpB,KAAKI,EAAMuB,GAAOM,WAAWV,SAASK,IAC7CF,EAAMH,SAASa,KAEhBhC,EAAMgC,GAAOP,SAAW,GAE1BK,EAAQE,GAAST,EA1BG,OA6BlB3C,EAAOiC,EAAeC,EAAOC,GAE3BkB,EAAY,IAAIC,SAAQ,SAACC,EAASC,GAGtC,IAFA,IAAIC,EAAe,KAEN,CACX,IAAIC,EAAOxB,EAAMlC,GACb2D,OAAQ,EAMZ,IAAK,IAAIC,KAJPD,EADEvC,EAAMpB,GACGoB,EAAMpB,GAAMiD,UAEZ,GAGX,IAAKP,EAAMH,SAASqB,IAAMA,IAAMhB,EAAK,CACnC,IAAIiB,EAAUH,EAAOC,EAASC,GACzB1B,EAAM0B,KACT1B,EAAM0B,GAAKC,EACXX,EAAQU,GAAK5D,GAEXkC,EAAM0B,GAAKC,IACb3B,EAAM0B,GAAKC,EACXX,EAAQU,GAAK5D,GAInB,IAAM8D,EAAKjG,SAASO,eAAe4B,GAanC,GAXE8D,GACiB,eAAjBA,EAAGtF,WACc,aAAjBsF,EAAGtF,YACFkE,EAAMH,SAASvC,KAEhByD,EAAaM,KAAK/D,GACdA,IAAS2C,GAAS3C,IAAS4C,IAC7BxB,EAAMpB,GAAM6C,SAAWX,EAAMlC,KAI7BA,IAAS4C,EACX,MAIF,GAFAT,EAAU4B,KAAK/D,GAEF,QADbA,EAAOiC,EAAeC,EAAOC,IAE3B,MAIJ,GAAIvF,EAAM0B,OAAQ,CAAC,IAAD,gBACFmF,GADE,IAChB,2BAA4B,CAAC,IAApBO,EAAmB,QACpBF,EAAKjG,SAASO,eAAe4F,GAC7BC,EAASpG,SAASO,eAAT,gBAAiC4F,IAC5CE,EAAYhB,EAAQN,GAAmB,oBAAZ,UAC3BkB,IACFG,EAAO5F,UAAY2F,IAAMrB,EAAQvB,EAAM4C,GAAGpC,WAAa,GAEvDkC,EAAGtF,UAAY0F,EACf9C,EAAM4C,GAAGjH,MAAQmH,IATL,8BAYhBX,EAAQE,QAER,IAAIU,EAAI,EACJC,EAAWC,aAAY,WACzB,IAAMP,EAAKjG,SAASO,eAAeqF,EAAaU,IAC1CF,EAASpG,SAASO,eAAT,gBAAiCqF,EAAaU,KACzDL,IACFA,EAAGtF,UAAY,UACfyF,EAAO5F,UACLoF,EAAaU,KAAOxB,EAAQvB,EAAMqC,EAAaU,IAAIvC,WAAa,GAClER,EAAMqC,EAAaU,IAAIpH,MAAQ,WAEjCoH,IACKV,EAAaU,KAChBG,cAAcF,GACdb,EAAQE,MAET/F,MA3Ge,UA+GF2F,EA/GE,WA+GlBkB,EA/GkB,OAiHlBC,EAAc,CAAC5B,GACf6B,EAASvB,EAAQN,UACdM,EAAQP,GAEV8B,EArHiB,0CAsHb,CACL5B,SAAUG,IACVF,KAAMyB,IAxHY,QA4HtB,KAAOE,GACLD,EAAYT,KAAKU,GACjBA,EAASvB,EAAQuB,GA9HG,OAiItBD,EAAYE,WAENC,EAAU,CACd9B,SAAUX,EAAMU,GAChBE,KAAM0B,IAEA1B,KAAK8B,QACbD,EAAQ7B,KAAK+B,MAxIS,kBAyIfF,GAzIe,4CAAH,qDCTfG,E,WACJ,WAAYrG,EAAIwE,GAAwB,IAAb1B,EAAY,uDAAJ,GAAI,oBACrCwD,KAAKtG,GAAKA,EACVsG,KAAK9B,UAAYA,EACjB8B,KAAKxD,MAAQA,EACbwD,KAAKhI,MAAQ,YACbgI,KAAKlC,SAAW,G,4CAElB,WACE,OAAOkC,KAAKlC,W,qBAEd,WACE,OAAOkC,KAAKxD,MAAMC,OAAS,M,KAIlBwD,EAAb,WACE,aAAe,oBACbD,KAAKpC,MAAQ,MACboC,KAAKnC,IAAM,MACXmC,KAAK/F,MAAQ,EACb+F,KAAKE,OAAS,EACdF,KAAKrC,MAAQ,GACbqC,KAAK1D,KAAO,GACZ0D,KAAK3D,MAAQ,GACb2D,KAAKzG,QAAS,EACdyG,KAAKrH,MAAQ,IACbqH,KAAKG,UAAY,GAXrB,mDAaE,SAAgBC,GAGd,GADAtH,SAASO,eAAe2G,KAAKpC,OAAO5E,MAAQ,GAE1CgH,KAAKK,eAAeL,KAAKpC,MAAOwC,IAChCJ,KAAKK,eAAeL,KAAKnC,IAAKuC,GAI9B,OAFAJ,KAAK3D,MAAQ,GACb2D,KAAKM,iBAAiBF,GACfA,IAtBb,8BAyBE,SAAiBA,GACf,IAAQG,EAAuBP,KAAKlE,cAAcsE,GAA1CG,mBAEQzH,SAASwC,cAAc,SAC/BtC,MAAMC,YAAY,SAA1B,UAAuCsH,EAAvC,SA7BJ,4BA+BE,SAAetF,EAAMmF,GACnB,IAAMvE,EAAamE,KAAKlE,cAAcsE,GAClCI,EAAMC,OAAOxF,EAAKyF,MAAM,KAAK,IAC7BvE,EAAMsE,OAAOxF,EAAKyF,MAAM,KAAK,IAC7BC,EAAS9E,EAAW+E,YAAc,EAAI/E,EAAWgF,aACjDC,EAAQjF,EAAWG,WAAa,EAAIH,EAAWO,YAC/C2E,EAAOlF,EAAWO,YAClB4E,EAAMnF,EAAWgF,aAErB,OAAOL,GAAOG,GAAUH,GAAOQ,GAAO7E,GAAO2E,GAAS3E,GAAO4E,IAxCjE,2BA0CE,SAAcX,GACZ,IAEMa,GACHC,OAAON,YAHQ,IAGmBR,EAC/BG,EAAqBU,EAHD,EAIpBE,EAAkBD,OAAOlF,WAAaiF,EACtCL,EAAcH,OAAOL,GAEvBpE,EAAaoF,KAAKC,MAAMF,GAAmB,EAM/C,OALInF,EAAa,KAAIA,EAAa,IAC9BA,EAAa,IAAGA,EAAa,GAI1B,CACLuE,qBACAK,cACAC,aANmBO,KAAKC,OAAOrB,KAAKE,OAASU,GAAe,GAO5D5E,aACAI,YAPkBgF,KAAKC,OAAOrB,KAAK/F,MAAQ+B,GAAc,MAvD/D,yBAiEE,SAAY/B,EAAOiG,GACjB,IAAMoB,EAAaF,KAAKC,MAAMnB,EAAS,GAAK,EACtCqB,EAAiBH,KAAKC,MAAMpH,EAAQ,GAAK,EACzCuH,EAAgBvH,EAAQmH,KAAKC,MAAMpH,EAAQ,GAAK,EAEtD+F,KAAKpC,MAAL,UAAgB0D,EAAhB,YAA8BC,GAC9BvB,KAAKnC,IAAL,UAAcyD,EAAd,YAA4BE,KAvEhC,8BAyEE,WAA6B,IAAZC,EAAW,uDAAJ,GAChB5F,EAAamE,KAAKlE,cAAc2F,GACtCzB,KAAKE,OAASrE,EAAW+E,YACzBZ,KAAK/F,MAAQ4B,EAAWG,WAExBgE,KAAK0B,YAAY1B,KAAK/F,MAAO+F,KAAKE,QAElC,IAAK,IAAId,EAAI,EAAGA,EAAIY,KAAKE,OAAQd,IAC/B,IAAK,IAAIuC,EAAI,EAAGA,EAAI3B,KAAK/F,MAAO0H,IAAK,CACnC,IAAMjI,EAAE,UAAM0F,EAAN,YAAWuC,GACbzD,EAAY8B,KAAK4B,cAAcxC,EAAGuC,GACxC3B,KAAK1D,KAAK5C,GAAM,IAAIqG,EAAKrG,EAAIwE,EAAW8B,KAAK6B,SAASnI,OApF9D,2BAwFE,SAAc0F,EAAGuC,GAAI,IAAD,EACdb,EAAQa,EAAI,EAAI3B,KAAK/F,MAAQ,EAAI,KAAzB,UAAmCmF,EAAnC,YAAwCuC,EAAI,GACpDZ,EAAOY,EAAI,EAAI,EAAI,KAAZ,UAAsBvC,EAAtB,YAA2BuC,EAAI,GACtCG,EAAK1C,EAAI,EAAIY,KAAKE,OAAS,EAAI,KAA1B,UAAoCd,EAAI,EAAxC,YAA6CuC,GAClDI,EAAO3C,EAAI,EAAI,EAAI,KAAZ,UAAsBA,EAAI,EAA1B,YAA+BuC,GAC1C,OAAO,EAAP,iBAAUb,EAAQ,GAAlB,cAAsBC,EAAO,GAA7B,cAAiCe,EAAK,GAAtC,cAA0CC,EAAO,GAAjD,IA7FJ,oBA+FE,SAAOrI,GACL,GAAIA,IAAOsG,KAAKpC,OAASlE,IAAOsG,KAAKnC,IACnC,OAAO,IAjGb,sBAoGE,SAASnE,GACP,OAAIA,IAAOsG,KAAKpC,MACP,CAAC,cACClE,IAAOsG,KAAKnC,IACd,CAAC,YAED,KA1Gb,yBA6GE,SAAYmE,GACVhC,KAAKrH,MAAQqJ,EACblJ,SAASC,KAAKC,MAAMC,YAAY,gBAAhC,UAAoD+G,KAAKrH,MAAzD,OACAG,SAASC,KAAKC,MAAMC,YAClB,4BADF,UAEkB,EAAb+G,KAAKrH,MAFV,SAhHJ,2BAqHE,SAAcsJ,GACI,OAAZA,GACFnJ,SAASC,KAAKC,MAAMC,YAAY,WAAY,KAC5CH,SAASC,KAAKC,MAAMC,YAAY,cAAe,SAC1B,QAAZgJ,IACTnJ,SAASC,KAAKC,MAAMC,YAAY,WAAY,KAC5CH,SAASC,KAAKC,MAAMC,YAAY,cAAe,eA3HrD,2BA8HE,SAAcqB,GACZ,IAAI4H,EAAY5H,EAAOb,UACjByF,EAASpG,SAASO,eAAT,gBAAiCiB,EAAOZ,KAEvC,cAAdwI,GACc,YAAdA,GACc,SAAdA,GACc,sBAAdA,GACc,mBAAdA,GACc,YAAdA,GAEAlC,KAAKrC,MAAMqB,KAAK1E,EAAOZ,IACvBY,EAAOb,UAAY,OACnByF,EAAO5F,UAAY,GACnB0G,KAAK1D,KAAKhC,EAAOZ,IAAI1B,MAAQ,OAC7BgI,KAAK1D,KAAKhC,EAAOZ,IAAIoE,SAAW,IACF,SAArBxD,EAAOb,YAChBuG,KAAKrC,MAAMwE,OAAOnC,KAAKrC,MAAMyE,QAAQ9H,EAAOZ,IAAK,GACjDwF,EAAO5F,UAAY,GACnBgB,EAAOb,UAAY,YACnBuG,KAAK1D,KAAKhC,EAAOZ,IAAI1B,MAAQ,aAE3BgI,KAAKzG,QACPyG,KAAKxG,gBArJX,uBAwJE,SAAU7B,EAAM+B,GACd,GAAa,eAAT/B,EAAuB,CAEzB,IAAIoH,EAAKjG,SAASO,eAAe2G,KAAKpC,OAClCmB,EAAG/F,MAAMqJ,YACXtD,EAAG/F,MAAQ,IAEbgH,KAAK1D,KAAK0D,KAAKpC,OAAOpB,MAAMqD,QAC5BG,KAAK1D,KAAK5C,GAAI8C,MAAM8F,QAAQ,cAC5BtC,KAAKpC,MAAQlE,OACR,GAAa,aAAT/B,EAAqB,CAC9B,IAAIoH,EAAKjG,SAASO,eAAe2G,KAAKpC,OAClCmB,EAAG/F,MAAMqJ,YACXtD,EAAG/F,MAAQ,IAEbgH,KAAK1D,KAAK0D,KAAKnC,KAAKrB,MAAMqD,QAC1BG,KAAK1D,KAAK5C,GAAI8C,MAAM8F,QAAQ,YAE5BtC,KAAKnC,IAAMnE,EAETsG,KAAKzG,QACPyG,KAAKxG,gBA7KX,8BAgLE,SAAiB+I,GACf,IAAMC,EAAU1J,SAASwC,cAAc,SACnCiH,GACFC,EAAQxJ,MAAMC,YAAY,gBAA1B,QACAuJ,EAAQxJ,MAAMC,YAAY,kBAA1B,UAEAuJ,EAAQxJ,MAAMC,YAAY,gBAA1B,WACAuJ,EAAQxJ,MAAMC,YAAY,kBAA1B,WAvLN,2BA2LE,SAAcsJ,GACO,CAAC,cAAe,eAAgB,SAAU,SAClDE,SACT,SAAC/I,GAAD,OAASZ,SAASO,eAAeK,GAAIgJ,SAAWH,OA9LtD,gEAiME,+DAAApJ,EAAA,6DAEE6G,KAAK2C,eAAc,GACnB3C,KAAK4C,kBAAiB,GACtB5C,KAAKlG,YAAW,GAJlB,SAKqB2D,IALrB,UAKMoF,EALN,OAME/J,SAASO,eAAe,YAAYC,UAAYuJ,EAAO/E,SACvDkC,KAAK2C,eAAc,GACnB3C,KAAK4C,kBAAiB,GAClBC,EAAO/E,WAAaG,IAT1B,uBAUwC,SAAhC+B,KAAK1D,KAAK0D,KAAKpC,OAAO5F,QACxBgI,KAAK1D,KAAK0D,KAAKpC,OAAO5F,MAAQ,WAEhC6K,EAAO9E,KAAK0E,SAAQ,SAAC/I,GACnB,IAAIqF,EAAKjG,SAASO,eAAeK,GAC5B,EAAK6B,OAAO7B,KACfqF,EAAGtF,UAAY,WAEjB,EAAK6C,KAAK5C,GAAI1B,MAAQ,aAGxBgI,KAAKzG,QAAS,EArBlB,2BAwBM6F,EAAI,EACN3C,EAASoG,EAAO9E,KAAKtB,OAKnBqG,EAAKhK,SAASO,eAAe2G,KAAKpC,OAGjCiF,EAAO9E,KAAK,IAET,EACG8E,EAAO9E,KAAK,GAAG2C,MAAM,KADzB,mBACJqC,EADI,KACDC,EADC,OAFe,EACXhD,KAAKnC,IAAI6C,MAAM,KADL,mBAClBqC,EADkB,KACfC,EADe,MAjCvB,EAwCiBhD,KAAKpC,MAAM8C,MAAM,KAxClC,mBAwCOuC,EAxCP,KAwCWC,EAxCX,KA0CMzC,OAAOyC,GAAM,IAAMzC,OAAOuC,GAC5BF,EAAG9J,MAAMqJ,UAAY,iBAGd5B,OAAOyC,GAAM,IAAMzC,OAAOuC,KAG1BvC,OAAOwC,GAAM,IAAMxC,OAAOsC,GACjCD,EAAG9J,MAAMqJ,UAAY,iBAGd5B,OAAOwC,GAAM,IAAMxC,OAAOsC,KACjCD,EAAG9J,MAAMqJ,UAAY,kBAKnBrC,KAAKzG,OACPsJ,EAAO9E,KAAK0E,SAAQ,SAAC/I,GACnB,IAAIqF,EAAKjG,SAASO,eAAeK,GAC7BqF,IACF,EAAKzC,KAAK5C,GAAI1B,MAAQ,iBACtB+G,EAAGtF,UAAY,sBAInBuG,KAAKzG,QAAS,EACR8F,EAAWC,aAAY,WAC3B,IAAIP,EAAKjG,SAASO,eAAewJ,EAAO9E,KAAKqB,IACzCL,IACF,EAAKzC,KAAKuG,EAAO9E,KAAKqB,IAAIpH,MAAQ,OAClC+G,EAAGtF,UAAY,UAEjB2F,GACS3C,GAAQ8C,cAAcF,KAC9BW,KAAKrH,QA7EZ,iDAjMF,iFAiRE,SAAcyH,GACZ,IAAK,IAAI+C,KAAOnD,KAAK1D,KAEhB0D,KAAKK,eAAe8C,EAAK/C,IACzBJ,KAAKrC,MAAMH,SAAS2F,KAErBnD,KAAK1D,KAAK6G,GAAKnL,MAAQ,YACvBgI,KAAK1D,KAAK6G,GAAKrF,SAAW,MAxRlC,wBA4RE,SAAWsF,GAET,IAAK,IAAID,KADTrK,SAASO,eAAe,YAAYC,UAAY,WAChC0G,KAAK3D,MAAO,CAC1B,IAAM0C,EAAKjG,SAASO,eAAe8J,GAC7BjE,EAASpG,SAASO,eAAT,gBAAiC8J,IAE7B,YAAjBpE,EAAGtF,WACc,SAAjBsF,EAAGtF,WACc,sBAAjBsF,EAAGtF,WACc,mBAAjBsF,EAAGtF,WACc,eAAjBsF,EAAGtF,WACc,aAAjBsF,EAAGtF,WACc,YAAjBsF,EAAGtF,YAEEuG,KAAK1D,KAAK6G,GAAKE,WAAsC,SAAzBrD,KAAK1D,KAAK6G,GAAKnL,QAC9C+G,EAAGtF,UAAY,aAEY,SAAzBuG,KAAK1D,KAAK6G,GAAKnL,QACjBgI,KAAK1D,KAAK6G,GAAKnL,MAAQ,YACvBgI,KAAK1D,KAAK6G,GAAKrF,SAAW,GAC1BoB,EAAO5F,UAAY,KAGnB0G,KAAKrC,MAAMH,SAAS2F,IAAQC,IACzBpD,KAAKzE,OAAO4H,KACfpE,EAAGtF,UAAY,aAEjBuG,KAAK1D,KAAK6G,GAAKnL,MAAQ,YACvBgI,KAAKrC,MAAMwE,OAAOnC,KAAKrC,MAAMyE,QAAQe,GAAM,SAxTnD,KCZaG,EAAO,SAAC,GAA2B,IAAzB/K,EAAwB,EAAxBA,OAAQC,EAAgB,EAAhBA,UACrBX,EAAUY,YAAYJ,GAAtBR,MACF0L,EAAWC,cACjB,EAAkC9K,oBAAS,GAA3C,mBAAOqC,EAAP,KAAkBC,EAAlB,KACA,EAAwBtC,mBAAS,CAAE4B,OAAQ,KAAMmJ,MAAM,IAAvD,mBAAOxI,EAAP,KAAaC,EAAb,KAEArC,qBAAU,WACR,IAAIhB,EAAQ,IAAIoI,EAChBpI,EAAM6L,mBACN7L,EAAMyI,iBAAiB,GACvBiD,EAASxL,EAASF,MACjB,CAAC0L,IAKJ,IAAKlG,OAAOpB,KAAKpE,GAAO4E,OACtB,OACE,qBAAKhD,UAAU,SAAf,SACE,gDAqBN,OACE,qBAAKA,UAAU,iBAAf,SACE,qBAAKA,UAAU,OAAf,SACE,uBACEA,UAAU,aACVC,GAAG,aACHC,aAlCiB,SAACQ,GACxBe,EAAQ,2BAAKD,GAAN,IAAYO,iBAAiB,KACpCR,GAAa,IA6BT,SAKE,gCAzBQ,WACd,IAAMa,EAAahE,EAAMiE,cAAcvD,GACvC,OAAO,YAAIwD,MAAMF,EAAW+E,aAAa3E,QAAQC,KAAI,SAACsE,GAAD,OACnD,oBAAc9G,GAAE,cAAS8G,GAAzB,SACE,cAAC,EAAD,CAEErF,WAAYqF,EAAM3E,EAAWgF,aAC7B9F,UAAWA,EACXC,aAAcA,EACdC,KAAMA,EACNC,QAASA,EACT3C,OAAQA,EACRC,UAAWA,GAPNgI,IAFAA,MAsBGmD,YCjDLC,G,MAAM,WACjB,MAA4BlL,mBAAS,GAArC,mBAAOH,EAAP,KAAeC,EAAf,KACA,OACE,uBAAMiB,UAAU,MAAhB,UACE,cAAC,EAAD,CAAKlB,OAAQA,EAAQC,UAAWA,IAChC,cAAC,EAAD,CAAMD,OAAQA,EAAQC,UAAWA,SCHrCqL,IAASC,OACP,cAAC,IAAD,CAAUhH,MAAOA,EAAjB,SACI,cAAC,EAAD,MAEJhE,SAASO,eAAe,W","file":"static/js/main.9cfb11c9.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst boardSlice = createSlice({\n  name: \"board\",\n  initialState: {\n    board: {},\n  },\n  reducers: {\n    setBoard(state, action) {\n      return {\n        board: action.payload,\n      };\n    },\n    updateGrid(state, action) {\n      //this.state.board.grid = action.payload\n    },\n  },\n});\n\n//Actions\n/////////////////////////////////////////////////////////////\nexport const { setBoard, updateGrid } = boardSlice.actions;\n\n//Reducer\n/////////////////////////////////////////////////////////////\nexport default boardSlice.reducer;\n\n//Selectors\n/////////////////////////////////////////////////////////////\nexport const selectBoard = (state) => state.board;\n","import React, { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectBoard } from \"../grid/boardSlice\";\n\nexport const Nav = ({ slider, setSlider }) => {\n  const { board } = useSelector(selectBoard);\n\n  const [speed, setSpeed] = useState(100);\n\n  useEffect(() => {\n    document.body.style.setProperty(\"--visit-delay\", `${100}ms`);\n    document.body.style.setProperty(\n      \"--animation-speed-visited\",\n      `${100 * 5}ms`\n    );\n  }, []);\n  const handleClick = async () => {\n    board.setAnimations(\"on\");\n    document.getElementById(\"distance\").innerHTML = \"Searching...\";\n    board.solved = false;\n    board.runDijkstra();\n  };\n  const handleClear = () => {\n    board.solved = false;\n    board.clearBoard(true);\n  };\n  const handleChange = (e) => {\n    board.setAnimations(\"off\");\n    board.removeVisited(slider);\n    //If start or end node is out of window then hold slider value\n    setSlider(board.manufactureGrid(e.target.value) || slider);\n  };\n\n  const handleMouseLeave = () => {\n    try {\n      board.setAnimations(\"on\");\n    } catch (error) {}\n  };\n\n  const handleChangeSpeed = ({ target }) => {\n    setSpeed(target.value);\n    board.updateSpeed(target.value);\n  };\n  return (\n    <div className=\"nav\" id=\"nav\" onMouseLeave={handleMouseLeave}>\n      <div className=\"nav-title\">\n        <h1>Path Visualizer</h1>\n      </div>\n      <div className=\"algo-button\">\n        <button onClick={handleClick} id=\"algo-button\">\n          Run Algorithm\n        </button>\n      </div>\n      <div className=\"clear-button\">\n        <button onClick={handleClear} id=\"clear-button\">\n          Clear Board\n        </button>\n      </div>\n      <div className=\"settings-container\">\n        <h2 style={{ margin: 0 }}>Settings:</h2>\n        <div className=\"settings\">\n          <div className=\"slider\">\n            <label for=\"slider\" style={{ width: 61 }}>\n              Rows: {slider}\n            </label>\n            <input\n              onChange={handleChange}\n              type=\"range\"\n              value={slider}\n              id=\"slider\"\n              name=\"volume\"\n              min=\"5\"\n              max=\"20\"\n            ></input>\n          </div>\n          <div className=\"speed\">\n            <label for=\"speed\" style={{ width: 95 }}>\n              Speed: {speed}ms\n            </label>\n            <input\n              onChange={handleChangeSpeed}\n              type=\"range\"\n              value={speed}\n              id=\"speed\"\n              name=\"speed\"\n              min=\"10\"\n              max=\"300\"\n            ></input>\n          </div>\n          <div className=\"distance\">\n            <p style={{ paddingRight: 10 }}>Path Distance: </p>\n            <p id=\"distance\" style={{ width: 80, textAlign: \"center\" }}>\n              Infinity\n            </p>\n          </div>\n        </div>\n        <div className=\"explanation\"></div>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectBoard } from \"./boardSlice\";\n\nexport const Gridrow = ({\n  mouseDown,\n  setMouseDown,\n  node,\n  setNode,\n  currentRow,\n  slider,\n  setSlider,\n}) => {\n  const { board } = useSelector(selectBoard);\n\n  const handleMouseDown = (e) => {\n    e.preventDefault();\n    const cssRoot = document.querySelector(\":root\");\n    cssRoot.style.setProperty(\"--node-cursor\", `grabbing`);\n    if (board.isNode(e.target.id))\n      setNode({ currentlyMoving: true, type: e.target.className });\n    board.addRemoveWall(e.target);\n    setMouseDown(true);\n  };\n  const handleMouseUp = () => {\n    const cssRoot = document.querySelector(\":root\");\n    cssRoot.style.setProperty(\"--node-cursor\", `grab`);\n    setNode({ ...node, currentlyMoving: false });\n    setMouseDown(false);\n  };\n  const handleMouseEnter = ({ target }) => {\n    if (node.currentlyMoving) {\n      board.placeNode(node.type, target.id);\n      setNode({ ...node });\n    } else if (mouseDown) board.addRemoveWall(target);\n  };\n\n  const dimensions = board.getDimensions(slider);\n  return [...Array(dimensions.innerWidth).keys()].map((col) => {\n    let id = `${currentRow}-${col + dimensions.offsetWidth}`;\n    board.graph[id] = board.grid[id];\n    let cName =\n      board.grid[id].items.length > 0\n        ? board.grid[id].items[0]\n        : board.grid[id].state;\n    return (\n      <td\n        key={col}\n        id={id}\n        className={cName}\n        onMouseEnter={handleMouseEnter}\n        onMouseDown={handleMouseDown}\n        onMouseUp={handleMouseUp}\n      >\n        <div className=\"specs\" id={`specs-${id}`}>\n          {board.grid[id].getSpecs()}\n        </div>\n      </td>\n    );\n  });\n};\n","import { configureStore }  from '@reduxjs/toolkit';\nimport boardReducer from '../components/grid/boardSlice';\n\n\nexport const store =  configureStore({\n    reducer: {\n        board: boardReducer\n    }\n})","import { store } from \"../app/store\";\n\nconst lowestCostNode = (costs, processed) => {\n  return Object.keys(costs).reduce((lowest, node) => {\n    if (lowest === null || costs[node] < costs[lowest]) {\n      if (!processed.includes(node)) lowest = node;\n    }\n    return lowest;\n  }, null);\n};\n\nexport const dijkstra = async () => {\n  const board = store.getState().board.board;\n\n  const { walls, graph, start, end, speed } = board;\n  if (start === end) {\n    return {\n      distance: 0,\n      path: [],\n    };\n  }\n  const costs = Object.assign({ end: Infinity }, graph[start].neighbors);\n  const parents = { end: null };\n  const processed = [];\n  for (let wall of walls) {\n    if (costs[wall]) {\n      delete costs[wall];\n    }\n  }\n  for (let child in graph[start].neighbors) {\n    if (\n      graph[child] &&\n      !Object.keys(graph[start].neighbors).includes(end) &&\n      !walls.includes(child)\n    ) {\n      graph[child].distance = 1;\n    }\n    parents[child] = start;\n  }\n\n  let node = lowestCostNode(costs, processed);\n\n  const myPromise = new Promise((resolve, reject) => {\n    let visitedNodes = [];\n\n    while (true) {\n      let cost = costs[node];\n      let children;\n      if (graph[node]) {\n        children = graph[node].neighbors;\n      } else {\n        children = {};\n      }\n      for (let n in children) {\n        if (!walls.includes(n) || n === end) {\n          let newCost = cost + children[n];\n          if (!costs[n]) {\n            costs[n] = newCost;\n            parents[n] = node;\n          }\n          if (costs[n] > newCost) {\n            costs[n] = newCost;\n            parents[n] = node;\n          }\n        }\n      }\n      const el = document.getElementById(node);\n      if (\n        el &&\n        el.className !== \"start-node\" &&\n        el.className !== \"end-node\" &&\n        !walls.includes(node)\n      ) {\n        visitedNodes.push(node);\n        if (node !== start && node !== end) {\n          graph[node].distance = costs[node];\n        }\n      }\n\n      if (node === end) {\n        break;\n      }\n      processed.push(node);\n      node = lowestCostNode(costs, processed);\n      if (node === null) {\n        break;\n      }\n    }\n\n    if (board.solved) {\n      for (let v of visitedNodes) {\n        const el = document.getElementById(v);\n        const specEl = document.getElementById(`specs-${v}`);\n        let pathName = !parents[end] ? \"deepred\" : \"visited-immediate\";\n        if (el) {\n          specEl.innerHTML = v !== start ? graph[v].getSpecs() : \"\";\n\n          el.className = pathName;\n          graph[v].state = pathName;\n        }\n      }\n      resolve(visitedNodes);\n    } else {\n      let i = 0;\n      let interval = setInterval(() => {\n        const el = document.getElementById(visitedNodes[i]);\n        const specEl = document.getElementById(`specs-${visitedNodes[i]}`);\n        if (el) {\n          el.className = \"visited\";\n          specEl.innerHTML =\n            visitedNodes[i] !== start ? graph[visitedNodes[i]].getSpecs() : \"\";\n          graph[visitedNodes[i]].state = \"visited\";\n        }\n        i++;\n        if (!visitedNodes[i]) {\n          clearInterval(interval);\n          resolve(visitedNodes);\n        }\n      }, speed);\n    }\n  });\n\n  let visited = await myPromise;\n\n  let optimalPath = [end];\n  let parent = parents[end];\n  delete parents[start];\n\n  if (!parent) {\n    return {\n      distance: Infinity,\n      path: visited,\n    };\n  }\n\n  while (parent) {\n    optimalPath.push(parent);\n    parent = parents[parent];\n  }\n\n  optimalPath.reverse();\n\n  const results = {\n    distance: costs[end],\n    path: optimalPath,\n  };\n  results.path.shift();\n  results.path.pop();\n  return results;\n};\n","import { dijkstra } from \"./algorithms/dijkstras\";\n\nclass Node {\n  constructor(id, neighbors, items = []) {\n    this.id = id;\n    this.neighbors = neighbors;\n    this.items = items;\n    this.state = \"unvisited\";\n    this.distance = \"\";\n  }\n  getSpecs() {\n    return this.distance;\n  }\n  hasItem() {\n    return this.items.length > 0;\n  }\n}\n\nexport class Board {\n  constructor() {\n    this.start = \"0-0\";\n    this.end = \"0-0\";\n    this.width = 0;\n    this.height = 0;\n    this.walls = [];\n    this.grid = {};\n    this.graph = {};\n    this.solved = false;\n    this.speed = 100;\n    this.algoQueue = [];\n  }\n  manufactureGrid(numberOfRows) {\n    //TODO more elegant way of rotating start\n    document.getElementById(this.start).style = \"\";\n    if (\n      this.nodeInBoundary(this.start, numberOfRows) &&\n      this.nodeInBoundary(this.end, numberOfRows)\n    ) {\n      this.graph = {};\n      this.assignGridOfSize(numberOfRows);\n      return numberOfRows;\n    }\n  }\n  assignGridOfSize(numberOfRows) {\n    const { verticalPixelCount } = this.getDimensions(numberOfRows);\n\n    const cssRoot = document.querySelector(\":root\");\n    cssRoot.style.setProperty(\"--size\", `${verticalPixelCount}px`);\n  }\n  nodeInBoundary(node, numberOfRows) {\n    const dimensions = this.getDimensions(numberOfRows);\n    let row = Number(node.split(\"-\")[0]);\n    let col = Number(node.split(\"-\")[1]);\n    let bottom = dimensions.innerHeight - 1 + dimensions.offsetHeight;\n    let right = dimensions.innerWidth - 1 + dimensions.offsetWidth;\n    let left = dimensions.offsetWidth;\n    let top = dimensions.offsetHeight;\n\n    return row <= bottom && row >= top && col <= right && col >= left;\n  }\n  getDimensions(numberOfRows) {\n    const navHeight = 75;\n    const boarderPixelCount = 3;\n    const conceptualPixelCount =\n      (window.innerHeight - navHeight) / numberOfRows;\n    const verticalPixelCount = conceptualPixelCount - boarderPixelCount;\n    const numberOfColumns = window.innerWidth / conceptualPixelCount;\n    const innerHeight = Number(numberOfRows);\n\n    let innerWidth = Math.floor(numberOfColumns) - 1;\n    if (innerWidth > 40) innerWidth = 40;\n    if (innerWidth < 8) innerWidth = 8;\n    const offsetHeight = Math.floor((this.height - innerHeight) / 2);\n    const offsetWidth = Math.floor((this.width - innerWidth) / 2);\n\n    return {\n      verticalPixelCount,\n      innerHeight,\n      offsetHeight,\n      innerWidth,\n      offsetWidth,\n    };\n  }\n  assignNodes(width, height) {\n    const vertMiddle = Math.floor(height / 2) - 1;\n    const horzFirstThird = Math.floor(width / 2) - 3;\n    const horzLastThird = width - Math.floor(width / 2) + 2;\n\n    this.start = `${vertMiddle}-${horzFirstThird}`;\n    this.end = `${vertMiddle}-${horzLastThird}`;\n  }\n  manufactureGraph(size = 20) {\n    const dimensions = this.getDimensions(size);\n    this.height = dimensions.innerHeight;\n    this.width = dimensions.innerWidth;\n\n    this.assignNodes(this.width, this.height);\n\n    for (let i = 0; i < this.height; i++) {\n      for (let j = 0; j < this.width; j++) {\n        const id = `${i}-${j}`;\n        const neighbors = this.findNeighbors(i, j);\n        this.grid[id] = new Node(id, neighbors, this.nodetype(id));\n      }\n    }\n  }\n  findNeighbors(i, j) {\n    let right = j + 1 > this.width - 1 ? null : `${i}-${j + 1}`;\n    let left = j - 1 < 0 ? null : `${i}-${j - 1}`;\n    let up = i + 1 > this.height - 1 ? null : `${i + 1}-${j}`;\n    let down = i - 1 < 0 ? null : `${i - 1}-${j}`;\n    return { [right]: 1, [left]: 1, [up]: 1, [down]: 1 };\n  }\n  isNode(id) {\n    if (id === this.start || id === this.end) {\n      return true;\n    }\n  }\n  nodetype(id) {\n    if (id === this.start) {\n      return [\"start-node\"];\n    } else if (id === this.end) {\n      return [\"end-node\"];\n    } else {\n      return [];\n    }\n  }\n  updateSpeed(speedValue) {\n    this.speed = speedValue;\n    document.body.style.setProperty(\"--visit-delay\", `${this.speed}ms`);\n    document.body.style.setProperty(\n      \"--animation-speed-visited\",\n      `${this.speed * 5}ms`\n    );\n  }\n  setAnimations(keyword) {\n    if (keyword === \"on\") {\n      document.body.style.setProperty(\"--toggle\", \"1\");\n      document.body.style.setProperty(\"--playState\", \"idle\");\n    } else if (keyword === \"off\") {\n      document.body.style.setProperty(\"--toggle\", \"0\");\n      document.body.style.setProperty(\"--playState\", \"finished\");\n    }\n  }\n  addRemoveWall(target) {\n    let classname = target.className;\n    const specEl = document.getElementById(`specs-${target.id}`);\n    if (\n      classname === \"unvisited\" ||\n      classname === \"visited\" ||\n      classname === \"path\" ||\n      classname === \"visited-immediate\" ||\n      classname === \"path-immediate\" ||\n      classname === \"deepred\"\n    ) {\n      this.walls.push(target.id);\n      target.className = \"wall\";\n      specEl.innerHTML = \"\";\n      this.grid[target.id].state = \"wall\";\n      this.grid[target.id].distance = \"\";\n    } else if (target.className === \"wall\") {\n      this.walls.splice(this.walls.indexOf(target.id), 1);\n      specEl.innerHTML = \"\";\n      target.className = \"unvisited\";\n      this.grid[target.id].state = \"unvisited\";\n    }\n    if (this.solved) {\n      this.runDijkstra();\n    }\n  }\n  placeNode(name, id) {\n    if (name === \"start-node\") {\n      //TODO more elegant way of rotating start\n      let el = document.getElementById(this.start);\n      if (el.style.transform) {\n        el.style = \"\";\n      }\n      this.grid[this.start].items.shift();\n      this.grid[id].items.unshift(\"start-node\");\n      this.start = id;\n    } else if (name === \"end-node\") {\n      let el = document.getElementById(this.start);\n      if (el.style.transform) {\n        el.style = \"\";\n      }\n      this.grid[this.end].items.shift();\n      this.grid[id].items.unshift(\"end-node\");\n\n      this.end = id;\n    }\n    if (this.solved) {\n      this.runDijkstra();\n    }\n  }\n  disableGridTable(disable) {\n    const cssRoot = document.querySelector(\":root\");\n    if (disable) {\n      cssRoot.style.setProperty(\"--grid-cursor\", `wait`);\n      cssRoot.style.setProperty(\"--grid-interact\", `none`);\n    } else {\n      cssRoot.style.setProperty(\"--grid-cursor\", `pointer`);\n      cssRoot.style.setProperty(\"--grid-interact\", `auto`);\n    }\n  }\n\n  disableNavBar(disable) {\n    const navItemIds = [\"algo-button\", \"clear-button\", \"slider\", \"speed\"];\n    navItemIds.forEach(\n      (id) => (document.getElementById(id).disabled = disable)\n    );\n  }\n  async runDijkstra() {\n    debugger;\n    this.disableNavBar(true);\n    this.disableGridTable(true);\n    this.clearBoard(false);\n    let result = await dijkstra();\n    document.getElementById(\"distance\").innerHTML = result.distance;\n    this.disableNavBar(false);\n    this.disableGridTable(false);\n    if (result.distance === Infinity) {\n      if (this.grid[this.start].state !== \"wall\") {\n        this.grid[this.start].state = \"deepred\";\n      }\n      result.path.forEach((id) => {\n        let el = document.getElementById(id);\n        if (!this.isNode(id)) {\n          el.className = \"deepred\";\n        }\n        this.grid[id].state = \"deepred\";\n      });\n\n      this.solved = false;\n      return;\n    }\n    let i = 0,\n      length = result.path.length;\n\n    //TODO more elegant way of rotating start\n\n    //start-node\n    let st = document.getElementById(this.start);\n    //2nd node in shortest path as x and y coordinates\n    let x, y;\n    if (!result.path[0]) {\n      [x, y] = this.end.split(\"-\");\n    } else {\n      [x, y] = result.path[0].split(\"-\");\n    }\n    //let [x, y] = result.path[0].split(\"-\");\n    //The Start of the Board as x and y coordinates\n    let [xs, ys] = this.start.split(\"-\");\n    //Left\n    if (Number(ys) - 1 === Number(y)) {\n      st.style.transform = \"rotate(180deg)\";\n    }\n    //Right\n    else if (Number(ys) + 1 === Number(y)) {\n    }\n    //Down\n    else if (Number(xs) - 1 === Number(x)) {\n      st.style.transform = \"rotate(-90deg)\";\n    }\n    //Up\n    else if (Number(xs) + 1 === Number(x)) {\n      st.style.transform = \"rotate(90deg)\";\n    }\n\n    //Print the path\n\n    if (this.solved) {\n      result.path.forEach((id) => {\n        let el = document.getElementById(id);\n        if (el) {\n          this.grid[id].state = \"path-immediate\";\n          el.className = \"path-immediate\";\n        }\n      });\n    } else {\n      this.solved = true;\n      const interval = setInterval(() => {\n        let el = document.getElementById(result.path[i]);\n        if (el) {\n          this.grid[result.path[i]].state = \"path\";\n          el.className = \"path\";\n        }\n        i++;\n        if (i >= length) clearInterval(interval);\n      }, this.speed);\n    }\n  }\n  removeVisited(numberOfRows) {\n    for (let box in this.grid) {\n      if (\n        !this.nodeInBoundary(box, numberOfRows) &&\n        !this.walls.includes(box)\n      ) {\n        this.grid[box].state = \"unvisited\";\n        this.grid[box].distance = \"\";\n      }\n    }\n  }\n  clearBoard(clearWalls) {\n    document.getElementById(\"distance\").innerHTML = \"Infinity\";\n    for (let box in this.graph) {\n      const el = document.getElementById(box);\n      const specEl = document.getElementById(`specs-${box}`);\n      if (\n        el.className === \"visited\" ||\n        el.className === \"path\" ||\n        el.className === \"visited-immediate\" ||\n        el.className === \"path-immediate\" ||\n        el.className === \"start-node\" ||\n        el.className === \"end-node\" ||\n        el.className === \"deepred\"\n      ) {\n        if (!this.grid[box].hasItem() && this.grid[box].state !== \"wall\") {\n          el.className = \"unvisited\";\n        }\n        if (this.grid[box].state !== \"wall\") {\n          this.grid[box].state = \"unvisited\";\n          this.grid[box].distance = \"\";\n          specEl.innerHTML = \"\";\n        }\n      }\n      if (this.walls.includes(box) && clearWalls) {\n        if (!this.isNode(box)) {\n          el.className = \"unvisited\";\n        }\n        this.grid[box].state = \"unvisited\";\n        this.walls.splice(this.walls.indexOf(box), 1);\n      }\n    }\n  }\n}\n","import React, { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setBoard, selectBoard } from \"./boardSlice\";\nimport { Gridrow } from \"./Gridrow\";\nimport { Board } from \"../../Board\";\n\nexport const Grid = ({ slider, setSlider }) => {\n  const { board } = useSelector(selectBoard);\n  const dispatch = useDispatch();\n  const [mouseDown, setMouseDown] = useState(false);\n  const [node, setNode] = useState({ target: null, bool: false });\n\n  useEffect(() => {\n    let board = new Board();\n    board.manufactureGraph();\n    board.assignGridOfSize(5);\n    dispatch(setBoard(board));\n  }, [dispatch]);\n  const handleMouseLeave = (e) => {\n    setNode({ ...node, currentlyMoving: false });\n    setMouseDown(false);\n  };\n  if (!Object.keys(board).length) {\n    return (\n      <div className=\"loader\">\n        <h3>Loading Grid</h3>\n      </div>\n    );\n  }\n  const getRows = () => {\n    const dimensions = board.getDimensions(slider);\n    return [...Array(dimensions.innerHeight).keys()].map((row) => (\n      <tr key={row} id={`row-${row}`}>\n        <Gridrow\n          key={row}\n          currentRow={row + dimensions.offsetHeight}\n          mouseDown={mouseDown}\n          setMouseDown={setMouseDown}\n          node={node}\n          setNode={setNode}\n          slider={slider}\n          setSlider={setSlider}\n        />\n      </tr>\n    ));\n  };\n  return (\n    <div className=\"grid-container\">\n      <div className=\"grid\">\n        <table\n          className=\"grid-table\"\n          id=\"grid-table\"\n          onMouseLeave={handleMouseLeave}\n        >\n          <tbody>{getRows()}</tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { Nav } from \"../components/nav/Nav\";\nimport { Grid } from \"../components/grid/Grid\";\nimport \"./index.css\";\n\nexport const App = () => {\n  const [slider, setSlider] = useState(5);\n  return (\n    <main className=\"App\">\n      <Nav slider={slider} setSlider={setSlider} />\n      <Grid slider={slider} setSlider={setSlider} />\n    </main>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport { App } from './app/App';\nimport { store } from './app/store'\n\n  ReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n  )"],"sourceRoot":""}